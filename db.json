{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/about/me.md","path":"about/me.md","modified":1,"renderable":0},{"_id":"themes/zen/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/zen/source/css/style.min.css","path":"css/style.min.css","modified":1,"renderable":1},{"_id":"themes/zen/source/js/twikoo.all.min.js","path":"js/twikoo.all.min.js","modified":1,"renderable":1},{"_id":"themes/zen/source/css/partial/atom-one-dark.min.css","path":"css/partial/atom-one-dark.min.css","modified":1,"renderable":1},{"_id":"themes/zen/source/css/partial/prism.css","path":"css/partial/prism.css","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/.DS_Store","hash":"25924e4d953ca1f6e07f2c40bd7f73f341371f05","modified":1705822678694},{"_id":"source/_posts/java-modifiers-final.md","hash":"0d3f7d540a2941bf3fbf79c04b48a3bc10a73a53","modified":1705821674000},{"_id":"source/.DS_Store","hash":"eb9d446e2560edab7c702a4f8b4ab5edd4815bdd","modified":1705822678694},{"_id":"source/_posts/gcc-gpp.md","hash":"3235cca86763c120e8e0420fc5cd4fab69f1fc1e","modified":1705821674000},{"_id":"source/_posts/mac-not-found-stdioh.md","hash":"f4c4bfffd53d86617e753ccd02f772757d97641b","modified":1705821674000},{"_id":"source/_posts/tools-proxychains.md","hash":"342d943fe80958d938f3565fa5327b135a7303d9","modified":1705821674000},{"_id":"source/about/me.md","hash":"3e0600dd6cc120828a8b678671d1470c8dabd400","modified":1705821722630},{"_id":"themes/zen/layout/categories.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1705828926461},{"_id":"themes/zen/LICENSE","hash":"6edfe3d53b1b6d64b342310f27fc3380f0b01798","modified":1705828926460},{"_id":"themes/zen/README.md","hash":"60ea9dc5c11c389fd4dac369502fef8a54fd8cc6","modified":1705828926461},{"_id":"themes/zen/_config.zen.yml","hash":"97fe3addcd06228db5da71d02e02502661d5453b","modified":1705828926461},{"_id":"themes/zen/layout/404.ejs","hash":"eedfc2cc495c2aa7065fb8e6ec44073cff83d9f0","modified":1705828926461},{"_id":"themes/zen/layout/layout.ejs","hash":"5f8abb9e9b138b6fc6a5a0ad469548f005114064","modified":1705828926462},{"_id":"themes/zen/layout/index.ejs","hash":"d288e6f2612c0cccf5d99eca51b78af3583dda41","modified":1705828926461},{"_id":"themes/zen/layout/post.ejs","hash":"47a5c7d456b95b89a73e08b0d91c267af4b8a5d2","modified":1705828926462},{"_id":"themes/zen/layout/components/twikoo.ejs","hash":"1f7c9c6f39e36789414c0b2daf1d003c86f0d14b","modified":1705828926461},{"_id":"themes/zen/layout/partial/footer.ejs","hash":"d987914552ce1af052cdf2574a67025e401db0d4","modified":1705828926462},{"_id":"themes/zen/layout/partial/head.ejs","hash":"0c307b68cf7945f822f5023d3899964ad20c4a71","modified":1705828926462},{"_id":"themes/zen/layout/partial/header.ejs","hash":"8d5a08b5409ff5a549de509aadcbd8f7fa13094e","modified":1705828926462},{"_id":"themes/zen/source/css/style.css","hash":"d62b6065c4ec3a66611885034f6d70d3a34da721","modified":1705828926463},{"_id":"themes/zen/source/css/style.min.css","hash":"d62b6065c4ec3a66611885034f6d70d3a34da721","modified":1705828926463},{"_id":"themes/zen/source/css/partial/atom-one-dark.min.css","hash":"56dddcd32332b54853ba9eadba3c883f95f00275","modified":1705828926463},{"_id":"themes/zen/source/css/partial/prism.css","hash":"252afe1594e3fece7521a6a62f72ec0decc948c1","modified":1705828926463},{"_id":"themes/zen/source/js/twikoo.all.min.js","hash":"871efb3c5feb625bd87a398ea1133d552e487588","modified":1705828926467}],"Category":[{"name":"技术笔记","_id":"clrnaka9o0003ny57ayz65tox"}],"Data":[],"Page":[{"title":"About me","date":"2024-01-21T07:13:01.000Z","_content":"\n","source":"about/me.md","raw":"---\ntitle: About me\ndate: 2024-01-21 15:13:01\n---\n\n","updated":"2024-01-21T07:22:02.630Z","path":"about/me.html","comments":1,"layout":"page","_id":"clrnaka9e0000ny577ijkfs0g","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"gcc 和 g++","date":"2023-10-23T03:46:55.241Z","updated":"2023-10-23T06:45:57.375Z","url":"/archives/gcc-and-g","_content":"\n\n\n> 用 gcc 直接编译 cpp，报错： undefined reference to std::cout\n\n在网上搜了下，在 StackOverflow 中找到答案：建议用**g++** 来编译 cpp，原来是 `gcc 需要手动链接 C++ 的库`，而 `g++ 会自动链接 C++ 的库`。\n\n- 使用 gcc 编译并且指定标准库（-lstdc++）：\n```bash \n$ gcc -o main main.cpp -lstdc++\n```\n\n- 使用 g++ 编译：\n```bash\n$ g++ -o main main.cpp\n```\n\ng++ 等同于 `gcc -xc++ -lstdc++ -shared-libgcc`\n- -x: 指定语言\n- -l: 链接库 \n- -shared-libgcc: 使用共享的 libgcc \n\n\n##  gcc 和 g++ 有何不同呢 ？\n\ngcc 和 g++ 都是 GUN Complier Collection 的一部分，gcc 是 GNU Compiler Collection 的 C 语言编译器（主要），而 g++ 是 GNU Compiler Collection 的 C++ 语言编译器。\n\n- gcc 和 g++ 都支持 `*.c` 和 `*.cpp` 文件的编译，g++ 和 gcc 绝大多数都相同。 \n- g++ 编译更倾向于 `*.cpp` 文件，它会自动链接 `std c++` 库。gcc 编译倾向于 `*.c` 文件，如果需要编译 `*.cpp` 需要指定 `std c++` 库\n\n## 学习参考 \n- [Stackoverflow：gcc undefined reference to `std::ios_base::Init::Init()' ](https://stackoverflow.com/questions/18698059/gcc-undefined-reference-to-stdios-baseinitinit)\n- [Stackoverflow: What is the difference between g++ and gcc?](https://stackoverflow.com/questions/172587/what-is-the-difference-between-g-and-gcc)\n- [GCC-Online-Docs: 3.15 Options for Linking](https://gcc.gnu.org/onlinedocs/gcc/Link-Options.html)","source":"_posts/gcc-gpp.md","raw":"---\ntitle: gcc 和 g++\ndate: 2023-10-23 11:46:55.241\nupdated: 2023-10-23 14:45:57.375\nurl: /archives/gcc-and-g\ncategories: 技术笔记\ntags: 编程语言\n---\n\n\n\n> 用 gcc 直接编译 cpp，报错： undefined reference to std::cout\n\n在网上搜了下，在 StackOverflow 中找到答案：建议用**g++** 来编译 cpp，原来是 `gcc 需要手动链接 C++ 的库`，而 `g++ 会自动链接 C++ 的库`。\n\n- 使用 gcc 编译并且指定标准库（-lstdc++）：\n```bash \n$ gcc -o main main.cpp -lstdc++\n```\n\n- 使用 g++ 编译：\n```bash\n$ g++ -o main main.cpp\n```\n\ng++ 等同于 `gcc -xc++ -lstdc++ -shared-libgcc`\n- -x: 指定语言\n- -l: 链接库 \n- -shared-libgcc: 使用共享的 libgcc \n\n\n##  gcc 和 g++ 有何不同呢 ？\n\ngcc 和 g++ 都是 GUN Complier Collection 的一部分，gcc 是 GNU Compiler Collection 的 C 语言编译器（主要），而 g++ 是 GNU Compiler Collection 的 C++ 语言编译器。\n\n- gcc 和 g++ 都支持 `*.c` 和 `*.cpp` 文件的编译，g++ 和 gcc 绝大多数都相同。 \n- g++ 编译更倾向于 `*.cpp` 文件，它会自动链接 `std c++` 库。gcc 编译倾向于 `*.c` 文件，如果需要编译 `*.cpp` 需要指定 `std c++` 库\n\n## 学习参考 \n- [Stackoverflow：gcc undefined reference to `std::ios_base::Init::Init()' ](https://stackoverflow.com/questions/18698059/gcc-undefined-reference-to-stdios-baseinitinit)\n- [Stackoverflow: What is the difference between g++ and gcc?](https://stackoverflow.com/questions/172587/what-is-the-difference-between-g-and-gcc)\n- [GCC-Online-Docs: 3.15 Options for Linking](https://gcc.gnu.org/onlinedocs/gcc/Link-Options.html)","slug":"gcc-gpp","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clrnaka9i0001ny578vy94m78","content":"<blockquote>\n<p>用 gcc 直接编译 cpp，报错： undefined reference to std::cout</p>\n</blockquote>\n<p>在网上搜了下，在 StackOverflow 中找到答案：建议用<strong>g++</strong> 来编译 cpp，原来是 <code>gcc 需要手动链接 C++ 的库</code>，而 <code>g++ 会自动链接 C++ 的库</code>。</p>\n<ul>\n<li><p>使用 gcc 编译并且指定标准库（-lstdc++）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -o main main.cpp -lstdc++</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 g++ 编译：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ g++ -o main main.cpp</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>g++ 等同于 <code>gcc -xc++ -lstdc++ -shared-libgcc</code></p>\n<ul>\n<li>-x: 指定语言</li>\n<li>-l: 链接库 </li>\n<li>-shared-libgcc: 使用共享的 libgcc</li>\n</ul>\n<h2 id=\"gcc-和-g-有何不同呢-？\"><a href=\"#gcc-和-g-有何不同呢-？\" class=\"headerlink\" title=\"gcc 和 g++ 有何不同呢 ？\"></a>gcc 和 g++ 有何不同呢 ？</h2><p>gcc 和 g++ 都是 GUN Complier Collection 的一部分，gcc 是 GNU Compiler Collection 的 C 语言编译器（主要），而 g++ 是 GNU Compiler Collection 的 C++ 语言编译器。</p>\n<ul>\n<li>gcc 和 g++ 都支持 <code>*.c</code> 和 <code>*.cpp</code> 文件的编译，g++ 和 gcc 绝大多数都相同。 </li>\n<li>g++ 编译更倾向于 <code>*.cpp</code> 文件，它会自动链接 <code>std c++</code> 库。gcc 编译倾向于 <code>*.c</code> 文件，如果需要编译 <code>*.cpp</code> 需要指定 <code>std c++</code> 库</li>\n</ul>\n<h2 id=\"学习参考\"><a href=\"#学习参考\" class=\"headerlink\" title=\"学习参考\"></a>学习参考</h2><ul>\n<li>[Stackoverflow：gcc undefined reference to &#96;std::ios_base::Init::Init()’ ](<a href=\"https://stackoverflow.com/questions/18698059/gcc-undefined-reference-to-stdios-baseinitinit\">https://stackoverflow.com/questions/18698059/gcc-undefined-reference-to-stdios-baseinitinit</a>)</li>\n<li><a href=\"https://stackoverflow.com/questions/172587/what-is-the-difference-between-g-and-gcc\">Stackoverflow: What is the difference between g++ and gcc?</a></li>\n<li><a href=\"https://gcc.gnu.org/onlinedocs/gcc/Link-Options.html\">GCC-Online-Docs: 3.15 Options for Linking</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>用 gcc 直接编译 cpp，报错： undefined reference to std::cout</p>\n</blockquote>\n<p>在网上搜了下，在 StackOverflow 中找到答案：建议用<strong>g++</strong> 来编译 cpp，原来是 <code>gcc 需要手动链接 C++ 的库</code>，而 <code>g++ 会自动链接 C++ 的库</code>。</p>\n<ul>\n<li><p>使用 gcc 编译并且指定标准库（-lstdc++）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -o main main.cpp -lstdc++</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 g++ 编译：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ g++ -o main main.cpp</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>g++ 等同于 <code>gcc -xc++ -lstdc++ -shared-libgcc</code></p>\n<ul>\n<li>-x: 指定语言</li>\n<li>-l: 链接库 </li>\n<li>-shared-libgcc: 使用共享的 libgcc</li>\n</ul>\n<h2 id=\"gcc-和-g-有何不同呢-？\"><a href=\"#gcc-和-g-有何不同呢-？\" class=\"headerlink\" title=\"gcc 和 g++ 有何不同呢 ？\"></a>gcc 和 g++ 有何不同呢 ？</h2><p>gcc 和 g++ 都是 GUN Complier Collection 的一部分，gcc 是 GNU Compiler Collection 的 C 语言编译器（主要），而 g++ 是 GNU Compiler Collection 的 C++ 语言编译器。</p>\n<ul>\n<li>gcc 和 g++ 都支持 <code>*.c</code> 和 <code>*.cpp</code> 文件的编译，g++ 和 gcc 绝大多数都相同。 </li>\n<li>g++ 编译更倾向于 <code>*.cpp</code> 文件，它会自动链接 <code>std c++</code> 库。gcc 编译倾向于 <code>*.c</code> 文件，如果需要编译 <code>*.cpp</code> 需要指定 <code>std c++</code> 库</li>\n</ul>\n<h2 id=\"学习参考\"><a href=\"#学习参考\" class=\"headerlink\" title=\"学习参考\"></a>学习参考</h2><ul>\n<li>[Stackoverflow：gcc undefined reference to &#96;std::ios_base::Init::Init()’ ](<a href=\"https://stackoverflow.com/questions/18698059/gcc-undefined-reference-to-stdios-baseinitinit\">https://stackoverflow.com/questions/18698059/gcc-undefined-reference-to-stdios-baseinitinit</a>)</li>\n<li><a href=\"https://stackoverflow.com/questions/172587/what-is-the-difference-between-g-and-gcc\">Stackoverflow: What is the difference between g++ and gcc?</a></li>\n<li><a href=\"https://gcc.gnu.org/onlinedocs/gcc/Link-Options.html\">GCC-Online-Docs: 3.15 Options for Linking</a></li>\n</ul>\n"},{"title":"Java-修饰符-final","date":"2023-08-15T02:59:17.000Z","updated":"2023-09-16T16:28:30.125Z","url":"/archives/java-modifiers-final","_content":"\n# final \n\n初识 final 几年，现在再回头看，是否能够对 final 有新的理解？\n\n\n\n## Java 语言规范中对 `final` 的定义\n\n- 修饰类 （Class）：不能被任何类继承\n- 修饰方法(Method)：不能被子类重写\n- 修饰变量 (Fields)：完成初始化（静态和实例）后不能被更改\n\n### final Class (§8.1.1.2)\n\n\n A class can be declared final if its definition is complete and no subclasses are desired or required.\n \n**It is a compile-time error if the name of a final class appears in the extends clause (§8.1.4) of another class declaration; this implies that a final class cannot have any subclasses.**\n\n**It is a compile-time error if a class is declared both final and abstract, because the implementation of such a class could never be completed (§8.1.1.1).**\n\nBecause a final class never has any subclasses, the methods of a final class are never overridden (§8.4.8.1).\n\n> 简单来说：一个类不想要被任何类继承，就用 final 修饰此类。有其他类想继承被 final 修饰类的会在编译期报错的（编译上限制不能被继承），还有一种情况是抽象类想要修饰final 也是会被报错的（和 abstract 所违背，抽象类是让子类去做个继承实现，而 final 的目的是为了不让任何类去继承）。 \n\n### final Method (§8.4.3.3)\n\n\nA method can be declared final to prevent subclasses from overriding or `hiding` it.\n\n**It is a compile-time error to attempt to override or hide a final method.**\n\nA private method and all methods declared immediately within a final class behave as if they are final, since it is impossible to override them.\n> 简单来说：防止子类对重写某个方法，用 final 修饰此方法。试图去重写被 final 修饰的父类方法会在编译期报错的。一个私有方法和final修饰类的所有方法表现会像是被final修饰一样的，因为它们不会被重写。\n\n\n*At run time, a machine-code generator or optimizer can \"inline\" the body of a final method, replacing an invocation of the method with the code in its body.\nThe inlining process must preserve the semantics of the method invocation. \nIn particular, if the target of an instance method invocation is null, then a NullPointerException must be thrown even if the method is inlined.\nA Java compiler must ensure that the exception will be thrown at the correct point, so that the actual arguments to the method will be seen to have been evaluated in the correct order prior to the method invocation.*\n\n> 在运行时，机器语言生成器或者是优化器能做“内联”，一个方法调用会把它调用的 final 修饰方法的方法体，调用给合成 final 方法的方法体。在内联的过程中必须得保证方法调用原本的语义，特别是在异常处理上，方法可能是内联的。Java 编译器必须保证异常抛在正确的点上。\n\n```java\n// Consider the example:  \nfinal class Point {\n    int x, y;\n    void move(int dx, int dy) { x += dx; y += dy; }\n}\nclass Test {\n    public static void main(String[] args) {\n        Point[] p = new Point[100];\n        for (int i = 0; i < p.length; i++) {\n            p[i] = new Point();\n            p[i].move(i, p.length-1-i);\n        }\n    }\n}\n```\n\n\n```Java\n// Inlining the method move of class Point in method main \n// would transform the for loop to the form:\n\n// 内联 Point 类的 move 会被转换成为这种：\n\n    for (int i = 0; i < p.length; i++) {\n        p[i] = new Point();\n        Point pi = p[i];\n        int j = p.length-1-i;\n        pi.x += i;\n        pi.y += j;\n    }\n\n\n// The loop might then be subject to further optimizations.\n// Such inlining cannot be done at compile time\n// unless it can be guaranteed that Test and Point will always be recompiled together,\n// so that whenever Point - and specifically its move method - changes, \n// the code for Test.main will also be updated.\n\n// 这个循环可能会被进一步优化。\n// 这样的内联不能在编译时做完成\n// 除非能够保证 Test 和 Point 总是能够在一起重新编译。\n// 这样每次 Point 发生改变，尤其是改变它的move方法，Test.main 也得更新。\n```\n\n\n\n\n### final Fields\n\n A field can be declared final (§4.12.4). Both class and instance variables (static and non-static fields) may be declared final.\nA blank final class variable must be definitely assigned by a static initializer of the class in which it is declared, or a compile-time error occurs (§8.7, §16.8).\nA blank final instance variable must be definitely assigned at the end of every constructor of the class in which it is declared, or a compile-time error occurs (§8.8, §16.9).\n\n> 简单来说： 一个字段可以被 final 修饰，静态和非静态字段都是可以被final 修饰的。一个未赋值的静态变量必须要在这个类的静态初始化时确定值，否则编译期报错。一个未赋值的实例变量必须要在构造实例结束前确定确定值，否认编译报错。\n\n## JVM 角度的 final \n\n### final 修饰类的字节码\n\n使用 javap 查看被 final 修饰类的字节码中的 `acc_flags` （用来表示访问全权限）。\n![image-1692081074704](https://source.youchuanlong.com/blog/image-1692081074704.png)\n\n![image-1692080839437](https://source.youchuanlong.com/blog/image-1692080839437.png)\n\n>  ACC_FINAL: 不允许有子类\n\n\n### final 修饰方法\n方法也是有 `acc_flags` 和类的一样： ACC_FINAL\n\n![image-1692081629277](https://source.youchuanlong.com/blog/image-1692081629277.png)\n\n> ACC_FINAL: 不允许被覆盖。\n\n### final 修饰的变量 \n\n变量也有 `acc_flags` ,同上：ACC_FINAL。\n\n![image-1692082038697](https://source.youchuanlong.com/blog/image-1692082038697.png)\n\n\n> ACC_FLAGS: 在创建对象后不会被改变\n\n\n是变量就会和存储有关，看看有什么不同吗。\n\n#### 静态 final 变量\n\n在一般情况下，我们要定义常量，一般都推荐用 final 修饰静态变量，保证常量不可变。\n\nfinal 修饰是静态变量是放在字节码的常量池，A 类 调用定义在 B 类中定义的常量，该常量直接放在 A 类的常量池。（Classloader 没加载 B.class 也是可以的，意味着不会触发 B 被加载，可以把 B 的 class 文件给删掉来验证。）\n\n```java\n// A:  FinalExample class \npublic  class FinalExample {\n\tpublic static void main(String[] args) {\n    \t// 调用另一个类的常量\n\t\tSystem.out.println(FinalConst.CONST);\n\t}\n}\n```\n\n\n```java\n\n// B: FinalConst class \npublic class FinalConst {\n\tpublic static final int CONST = 20230815;\n}\n\n```\n\nFinalExample 的常量池和 main 方法中的调用：\n\n```\n// #### 常量池：\nConstant pool:\n   #1 = Methodref          #7.#21         // java/lang/Object.\"<init>\":()V\n   #2 = Fieldref           #22.#23        // java/lang/System.out:Ljava/io/PrintStream;\n   #3 = Class              #24            // com/example/spec/FinalConst\n   #4 = Integer            20230815     // 可以看到在定义的常量\n   # ...\n{\n  // ... \n  public static void main(java.lang.String[]);\n    descriptor: ([Ljava/lang/String;)V\n    flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n    Code:\n      stack=2, locals=1, args_size=1\n         0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;\n         3: ldc           #4                  // int 20230815 ，ldc: 将常量池的操作数 push 到操作栈中\n         5: invokevirtual #5                  // Method java/io/PrintStream.println:(I)V\n         8: return\n      LineNumberTable:\n        line 12: 0\n        line 13: 8\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0       9     0  args   [Ljava/lang/String;\n}\n```\n\n\n##### 加 final 和 不加 final 的静态变量有什么不同？\n\n- 我验证的不加 final 也会存在常量池中 ？？？\n- ChatGTP:\n```txt\n# Question: \n\n加 final 和 不加final 修饰的静态变量，除了保证不可变外有什么区别 ，都会存常量池吗?\n\n# Answer:\n\n不是所有的静态变量都会被存储在常量池中，final 修饰的静态变量和非 final 修饰的静态变量在这方面可能会有一些区别。让我解释一下：\n\nfinal 修饰的静态变量： 使用 final 修饰的静态变量在编译期间就会被确定其值，并且在类加载时进行初始化。这种情况下，它们的值会被存储在常量池中，以便在编译时被优化和直接使用。因此，final 修饰的静态变量通常会存储在常量池中。\n\n非 final 修饰的静态变量： 非 final 修饰的静态变量的值在编译期间无法确定，它们会在类加载时被初始化。这些变量的值不会被存储在常量池中，而是存储在类的静态变量区域中。\n\n需要注意的是，即使变量的值存储在常量池中，其内存地址并不一定相同。在某些情况下，不同的类加载器可能会导致同一个常量池中的值在内存中存在多个副本。这取决于类加载器的实现和加载过程。\n\n综上所述，final 修饰的静态变量通常会存储在常量池中，但非 final 修饰的静态变量的值会存储在静态变量区域中，而不是常量池。\n```\n\n\n#### 实例 final 变量\n\n\n```java\npublic  class FinalExample {\n\n\t// 没有 final 修饰的实例\n\tprivate int y = 1999;\n\n\tpublic static void main(String[] args) {\n\t\t// final 修饰的实例变量\n\t\tint val = new FinalVal().x;\n\t\tint val2 = new FinalExample().y;\n\t}\n\n}\n```\n\n```java\npublic class FinalVal {\n\tpublic final int x = 20230815;\n}\n```\n\n```\nConstant pool:\n   #1 = Methodref          #9.#27         // java/lang/Object.\"<init>\":()V\n   #2 = Fieldref           #7.#28         // com/example/spec/FinalExample.y:I\n   #3 = Class              #29            // com/example/spec/FinalVal\n   #4 = Methodref          #3.#27         //  com/example/spec/FinalVal.\"<init>\":()V\n   #5 = Methodref          #30.#31        // java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;\n   #6 = Integer            20230815  // 可以看到常量池中有final 声明的实例常量的值\n  #...\n{\n\n\t// 无参实例方法\n  public com.example.spec.FinalExample();\n    descriptor: ()V\n    flags: (0x0001) ACC_PUBLIC\n    Code:\n      stack=2, locals=1, args_size=1\n         0: aload_0\n         1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n         4: aload_0\n         5: sipush        1999  // 可以看到实例变量其实是在构造中赋值的\n         8: putfield      #2                  // Field y:I\n        11: return\n      LineNumberTable:\n        line 7: 0\n        line 12: 4\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0      12     0  this   Lcom/example/spec/FinalExample;\n\n  public static void main(java.lang.String[]);\n    descriptor: ([Ljava/lang/String;)V\n    flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n    Code:\n      stack=2, locals=3, args_size=1\n         0: new           #3                  // class com/example/spec/FinalVal\n         3: dup\n         4: invokespecial #4                  // Method com/example/spec/FinalVal.\"<init>\":()V\n         7: invokestatic  #5                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;\n        10: pop\n        11: ldc           #6                  // int 20230815\n        13: istore_1\n        14: new           #7                  // class com/example/spec/FinalExample\n        17: dup\n        18: invokespecial #8                  // Method \"<init>\":()V\n        21: getfield      #2                  // Field y:I,getfield\n        24: istore_2\n        25: return\n      LineNumberTable:\n        line 16: 0\n        line 17: 14\n        line 18: 25\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0      26     0  args   [Ljava/lang/String;\n           14      12     1   val   I\n           25       1     2  val2   I\n}\nSourceFile: \"FinalExample.java\"\n```\n\n\n#### 局部 final 变量\n平时会用 final 在修饰局部变量，在它本身的语义上保证变量不可变，另外来提高代码的阅读性。\n\n```Java\n// 表明这个变量值不要改动。（个人习惯）\nfinal boolean isInterruptIfRunning = false;\nfuture.cancel(isInterruptIfRunning);\n```\n发现 final 在一般的方法中修饰变量，除了保持final的特性外，没什么不同，都是存储在局部方法的局部变量中。但是 main 方法中的修饰的变量除了局部变量表外，还会存在常量池中。\n\n\n```java\npackage com.example.spec;\n\nimport java.io.PrintStream;\n\n/**\n * @author YouChuanlong\n * Created at 2023/8/15 14:18\n */\npublic  class FinalExample {\n\n\tprivate final static PrintStream OUT = System.out;\n\n\tpublic static void main(String[] args) {\n\t\t// main 方法中声明的变量也会存在常量池中\n\t\tfinal int a = 2000217;\n\t\tfinal int b = 2000218;\n\t\tint c = 2000219;\n\t\tFinalVal valObj = new FinalVal();  // 验证对象\n\t\thello();\n\t}\n\n\tpublic static void hello() {\n\t\t// 静态方法中修饰变量\n\t\tfinal int helloA = 4321;\n\t\tint helloB = 8642; // A B 指令是否相同\n\t\tOUT.println(helloA);\n\t}\n\n\tpublic void hey() {\n\t\t// 实例方法中修饰变量\n\t\tfinal int heyVal = 9765;\n\t\tOUT.println(heyVal);\n\t}\n\n}\n```\n\n\n```\n # 常量池\nConstant pool:\n   #1 = Methodref          #12.#40        // java/lang/Object.\"<init>\":()V\n   #2 = Integer            2000217\t      // main 方法中定义\t\n   #3 = Integer            2000218\t\t  // main 方法中定义\n   #4 = Integer            2000219\t\t  // main 方法中定义\n   #5 = Class              #41            // com/example/spec/FinalVal\n   #6 = Methodref          #5.#40         // com/example/spec/FinalVal.\"<init>\":()V\n   #7 = Methodref          #11.#42        // com/example/spec/FinalExample.hello:()V\n   #8 = Fieldref           #11.#43        // com/example/spec/FinalExample.OUT:Ljava/io/PrintStream;\n   // ... \n{\n\n  // ...\n  public static void main(java.lang.String[]);\n    descriptor: ([Ljava/lang/String;)V\n    flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n    Code:\n      stack=2, locals=5, args_size=1\n         0: ldc           #2                  // int 2000217\n         2: istore_1\n         3: ldc           #3                  // int 2000218\n         5: istore_2\n         6: ldc           #4                  // int 2000219\n         8: istore_3\n         9: new           #5                  // class com/example/spec/FinalVal\n        12: dup\n        13: invokespecial #6                  // Method com/example/spec/FinalVal.\"<init>\":()V\n        16: astore        4\n        18: invokestatic  #7                  // Method hello:()V\n        21: return\n      LineNumberTable:\n       \t// ... \n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0      22     0  args   [Ljava/lang/String;\n            3      19     1     a   I\n            6      16     2     b   I\n            9      13     3     c   I\n           18       4     4 valObj   Lcom/example/spec/FinalVal;\n\n  public static void hello();\n    descriptor: ()V\n    flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n    Code:\n      stack=2, locals=2, args_size=0\n         0: sipush        4321\n         3: istore_0\n         4: sipush        8642\n         7: istore_1\n         8: getstatic     #8                  // Field OUT:Ljava/io/PrintStream;\n        11: sipush        4321\n        14: invokevirtual #9                  // Method java/io/PrintStream.println:(I)V\n        17: return\n      LineNumberTable:\n       // ...\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            4      14     0 helloA   I\n            8      10     1 helloB   I\n\n  public void hey();\n    descriptor: ()V\n    flags: (0x0001) ACC_PUBLIC\n    Code:\n      stack=2, locals=2, args_size=1\n         0: sipush        9765\n         3: istore_1\n         4: getstatic     #8                  // Field OUT:Ljava/io/PrintStream;\n         7: sipush        9765\n        10: invokevirtual #9                  // Method java/io/PrintStream.println:(I)V\n        13: return\n      LineNumberTable:\n       // ...\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0      14     0  this   Lcom/example/spec/FinalExample;\n            4      10     1 heyVal   I\n\n\t// ...\nSourceFile: \"FinalExample.java\"\n```\n\n## 学习参考\n- [The Java® Language Specification Java SE 8 Edition](https://docs.oracle.com/javase/specs/jls/se8/html/index.html)\n- [The Java® Virtual Machine Specification\nJava SE 8 Edition](https://docs.oracle.com/javase/specs/jvms/se8/html/)","source":"_posts/java-modifiers-final.md","raw":"---\ntitle: Java-修饰符-final \ndate: 2023-08-15 10:59:17.0\nupdated: 2023-09-17 00:28:30.125\nurl: /archives/java-modifiers-final\ncategories: 技术笔记\ntags: 编程语言\n---\n\n# final \n\n初识 final 几年，现在再回头看，是否能够对 final 有新的理解？\n\n\n\n## Java 语言规范中对 `final` 的定义\n\n- 修饰类 （Class）：不能被任何类继承\n- 修饰方法(Method)：不能被子类重写\n- 修饰变量 (Fields)：完成初始化（静态和实例）后不能被更改\n\n### final Class (§8.1.1.2)\n\n\n A class can be declared final if its definition is complete and no subclasses are desired or required.\n \n**It is a compile-time error if the name of a final class appears in the extends clause (§8.1.4) of another class declaration; this implies that a final class cannot have any subclasses.**\n\n**It is a compile-time error if a class is declared both final and abstract, because the implementation of such a class could never be completed (§8.1.1.1).**\n\nBecause a final class never has any subclasses, the methods of a final class are never overridden (§8.4.8.1).\n\n> 简单来说：一个类不想要被任何类继承，就用 final 修饰此类。有其他类想继承被 final 修饰类的会在编译期报错的（编译上限制不能被继承），还有一种情况是抽象类想要修饰final 也是会被报错的（和 abstract 所违背，抽象类是让子类去做个继承实现，而 final 的目的是为了不让任何类去继承）。 \n\n### final Method (§8.4.3.3)\n\n\nA method can be declared final to prevent subclasses from overriding or `hiding` it.\n\n**It is a compile-time error to attempt to override or hide a final method.**\n\nA private method and all methods declared immediately within a final class behave as if they are final, since it is impossible to override them.\n> 简单来说：防止子类对重写某个方法，用 final 修饰此方法。试图去重写被 final 修饰的父类方法会在编译期报错的。一个私有方法和final修饰类的所有方法表现会像是被final修饰一样的，因为它们不会被重写。\n\n\n*At run time, a machine-code generator or optimizer can \"inline\" the body of a final method, replacing an invocation of the method with the code in its body.\nThe inlining process must preserve the semantics of the method invocation. \nIn particular, if the target of an instance method invocation is null, then a NullPointerException must be thrown even if the method is inlined.\nA Java compiler must ensure that the exception will be thrown at the correct point, so that the actual arguments to the method will be seen to have been evaluated in the correct order prior to the method invocation.*\n\n> 在运行时，机器语言生成器或者是优化器能做“内联”，一个方法调用会把它调用的 final 修饰方法的方法体，调用给合成 final 方法的方法体。在内联的过程中必须得保证方法调用原本的语义，特别是在异常处理上，方法可能是内联的。Java 编译器必须保证异常抛在正确的点上。\n\n```java\n// Consider the example:  \nfinal class Point {\n    int x, y;\n    void move(int dx, int dy) { x += dx; y += dy; }\n}\nclass Test {\n    public static void main(String[] args) {\n        Point[] p = new Point[100];\n        for (int i = 0; i < p.length; i++) {\n            p[i] = new Point();\n            p[i].move(i, p.length-1-i);\n        }\n    }\n}\n```\n\n\n```Java\n// Inlining the method move of class Point in method main \n// would transform the for loop to the form:\n\n// 内联 Point 类的 move 会被转换成为这种：\n\n    for (int i = 0; i < p.length; i++) {\n        p[i] = new Point();\n        Point pi = p[i];\n        int j = p.length-1-i;\n        pi.x += i;\n        pi.y += j;\n    }\n\n\n// The loop might then be subject to further optimizations.\n// Such inlining cannot be done at compile time\n// unless it can be guaranteed that Test and Point will always be recompiled together,\n// so that whenever Point - and specifically its move method - changes, \n// the code for Test.main will also be updated.\n\n// 这个循环可能会被进一步优化。\n// 这样的内联不能在编译时做完成\n// 除非能够保证 Test 和 Point 总是能够在一起重新编译。\n// 这样每次 Point 发生改变，尤其是改变它的move方法，Test.main 也得更新。\n```\n\n\n\n\n### final Fields\n\n A field can be declared final (§4.12.4). Both class and instance variables (static and non-static fields) may be declared final.\nA blank final class variable must be definitely assigned by a static initializer of the class in which it is declared, or a compile-time error occurs (§8.7, §16.8).\nA blank final instance variable must be definitely assigned at the end of every constructor of the class in which it is declared, or a compile-time error occurs (§8.8, §16.9).\n\n> 简单来说： 一个字段可以被 final 修饰，静态和非静态字段都是可以被final 修饰的。一个未赋值的静态变量必须要在这个类的静态初始化时确定值，否则编译期报错。一个未赋值的实例变量必须要在构造实例结束前确定确定值，否认编译报错。\n\n## JVM 角度的 final \n\n### final 修饰类的字节码\n\n使用 javap 查看被 final 修饰类的字节码中的 `acc_flags` （用来表示访问全权限）。\n![image-1692081074704](https://source.youchuanlong.com/blog/image-1692081074704.png)\n\n![image-1692080839437](https://source.youchuanlong.com/blog/image-1692080839437.png)\n\n>  ACC_FINAL: 不允许有子类\n\n\n### final 修饰方法\n方法也是有 `acc_flags` 和类的一样： ACC_FINAL\n\n![image-1692081629277](https://source.youchuanlong.com/blog/image-1692081629277.png)\n\n> ACC_FINAL: 不允许被覆盖。\n\n### final 修饰的变量 \n\n变量也有 `acc_flags` ,同上：ACC_FINAL。\n\n![image-1692082038697](https://source.youchuanlong.com/blog/image-1692082038697.png)\n\n\n> ACC_FLAGS: 在创建对象后不会被改变\n\n\n是变量就会和存储有关，看看有什么不同吗。\n\n#### 静态 final 变量\n\n在一般情况下，我们要定义常量，一般都推荐用 final 修饰静态变量，保证常量不可变。\n\nfinal 修饰是静态变量是放在字节码的常量池，A 类 调用定义在 B 类中定义的常量，该常量直接放在 A 类的常量池。（Classloader 没加载 B.class 也是可以的，意味着不会触发 B 被加载，可以把 B 的 class 文件给删掉来验证。）\n\n```java\n// A:  FinalExample class \npublic  class FinalExample {\n\tpublic static void main(String[] args) {\n    \t// 调用另一个类的常量\n\t\tSystem.out.println(FinalConst.CONST);\n\t}\n}\n```\n\n\n```java\n\n// B: FinalConst class \npublic class FinalConst {\n\tpublic static final int CONST = 20230815;\n}\n\n```\n\nFinalExample 的常量池和 main 方法中的调用：\n\n```\n// #### 常量池：\nConstant pool:\n   #1 = Methodref          #7.#21         // java/lang/Object.\"<init>\":()V\n   #2 = Fieldref           #22.#23        // java/lang/System.out:Ljava/io/PrintStream;\n   #3 = Class              #24            // com/example/spec/FinalConst\n   #4 = Integer            20230815     // 可以看到在定义的常量\n   # ...\n{\n  // ... \n  public static void main(java.lang.String[]);\n    descriptor: ([Ljava/lang/String;)V\n    flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n    Code:\n      stack=2, locals=1, args_size=1\n         0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;\n         3: ldc           #4                  // int 20230815 ，ldc: 将常量池的操作数 push 到操作栈中\n         5: invokevirtual #5                  // Method java/io/PrintStream.println:(I)V\n         8: return\n      LineNumberTable:\n        line 12: 0\n        line 13: 8\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0       9     0  args   [Ljava/lang/String;\n}\n```\n\n\n##### 加 final 和 不加 final 的静态变量有什么不同？\n\n- 我验证的不加 final 也会存在常量池中 ？？？\n- ChatGTP:\n```txt\n# Question: \n\n加 final 和 不加final 修饰的静态变量，除了保证不可变外有什么区别 ，都会存常量池吗?\n\n# Answer:\n\n不是所有的静态变量都会被存储在常量池中，final 修饰的静态变量和非 final 修饰的静态变量在这方面可能会有一些区别。让我解释一下：\n\nfinal 修饰的静态变量： 使用 final 修饰的静态变量在编译期间就会被确定其值，并且在类加载时进行初始化。这种情况下，它们的值会被存储在常量池中，以便在编译时被优化和直接使用。因此，final 修饰的静态变量通常会存储在常量池中。\n\n非 final 修饰的静态变量： 非 final 修饰的静态变量的值在编译期间无法确定，它们会在类加载时被初始化。这些变量的值不会被存储在常量池中，而是存储在类的静态变量区域中。\n\n需要注意的是，即使变量的值存储在常量池中，其内存地址并不一定相同。在某些情况下，不同的类加载器可能会导致同一个常量池中的值在内存中存在多个副本。这取决于类加载器的实现和加载过程。\n\n综上所述，final 修饰的静态变量通常会存储在常量池中，但非 final 修饰的静态变量的值会存储在静态变量区域中，而不是常量池。\n```\n\n\n#### 实例 final 变量\n\n\n```java\npublic  class FinalExample {\n\n\t// 没有 final 修饰的实例\n\tprivate int y = 1999;\n\n\tpublic static void main(String[] args) {\n\t\t// final 修饰的实例变量\n\t\tint val = new FinalVal().x;\n\t\tint val2 = new FinalExample().y;\n\t}\n\n}\n```\n\n```java\npublic class FinalVal {\n\tpublic final int x = 20230815;\n}\n```\n\n```\nConstant pool:\n   #1 = Methodref          #9.#27         // java/lang/Object.\"<init>\":()V\n   #2 = Fieldref           #7.#28         // com/example/spec/FinalExample.y:I\n   #3 = Class              #29            // com/example/spec/FinalVal\n   #4 = Methodref          #3.#27         //  com/example/spec/FinalVal.\"<init>\":()V\n   #5 = Methodref          #30.#31        // java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;\n   #6 = Integer            20230815  // 可以看到常量池中有final 声明的实例常量的值\n  #...\n{\n\n\t// 无参实例方法\n  public com.example.spec.FinalExample();\n    descriptor: ()V\n    flags: (0x0001) ACC_PUBLIC\n    Code:\n      stack=2, locals=1, args_size=1\n         0: aload_0\n         1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n         4: aload_0\n         5: sipush        1999  // 可以看到实例变量其实是在构造中赋值的\n         8: putfield      #2                  // Field y:I\n        11: return\n      LineNumberTable:\n        line 7: 0\n        line 12: 4\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0      12     0  this   Lcom/example/spec/FinalExample;\n\n  public static void main(java.lang.String[]);\n    descriptor: ([Ljava/lang/String;)V\n    flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n    Code:\n      stack=2, locals=3, args_size=1\n         0: new           #3                  // class com/example/spec/FinalVal\n         3: dup\n         4: invokespecial #4                  // Method com/example/spec/FinalVal.\"<init>\":()V\n         7: invokestatic  #5                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;\n        10: pop\n        11: ldc           #6                  // int 20230815\n        13: istore_1\n        14: new           #7                  // class com/example/spec/FinalExample\n        17: dup\n        18: invokespecial #8                  // Method \"<init>\":()V\n        21: getfield      #2                  // Field y:I,getfield\n        24: istore_2\n        25: return\n      LineNumberTable:\n        line 16: 0\n        line 17: 14\n        line 18: 25\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0      26     0  args   [Ljava/lang/String;\n           14      12     1   val   I\n           25       1     2  val2   I\n}\nSourceFile: \"FinalExample.java\"\n```\n\n\n#### 局部 final 变量\n平时会用 final 在修饰局部变量，在它本身的语义上保证变量不可变，另外来提高代码的阅读性。\n\n```Java\n// 表明这个变量值不要改动。（个人习惯）\nfinal boolean isInterruptIfRunning = false;\nfuture.cancel(isInterruptIfRunning);\n```\n发现 final 在一般的方法中修饰变量，除了保持final的特性外，没什么不同，都是存储在局部方法的局部变量中。但是 main 方法中的修饰的变量除了局部变量表外，还会存在常量池中。\n\n\n```java\npackage com.example.spec;\n\nimport java.io.PrintStream;\n\n/**\n * @author YouChuanlong\n * Created at 2023/8/15 14:18\n */\npublic  class FinalExample {\n\n\tprivate final static PrintStream OUT = System.out;\n\n\tpublic static void main(String[] args) {\n\t\t// main 方法中声明的变量也会存在常量池中\n\t\tfinal int a = 2000217;\n\t\tfinal int b = 2000218;\n\t\tint c = 2000219;\n\t\tFinalVal valObj = new FinalVal();  // 验证对象\n\t\thello();\n\t}\n\n\tpublic static void hello() {\n\t\t// 静态方法中修饰变量\n\t\tfinal int helloA = 4321;\n\t\tint helloB = 8642; // A B 指令是否相同\n\t\tOUT.println(helloA);\n\t}\n\n\tpublic void hey() {\n\t\t// 实例方法中修饰变量\n\t\tfinal int heyVal = 9765;\n\t\tOUT.println(heyVal);\n\t}\n\n}\n```\n\n\n```\n # 常量池\nConstant pool:\n   #1 = Methodref          #12.#40        // java/lang/Object.\"<init>\":()V\n   #2 = Integer            2000217\t      // main 方法中定义\t\n   #3 = Integer            2000218\t\t  // main 方法中定义\n   #4 = Integer            2000219\t\t  // main 方法中定义\n   #5 = Class              #41            // com/example/spec/FinalVal\n   #6 = Methodref          #5.#40         // com/example/spec/FinalVal.\"<init>\":()V\n   #7 = Methodref          #11.#42        // com/example/spec/FinalExample.hello:()V\n   #8 = Fieldref           #11.#43        // com/example/spec/FinalExample.OUT:Ljava/io/PrintStream;\n   // ... \n{\n\n  // ...\n  public static void main(java.lang.String[]);\n    descriptor: ([Ljava/lang/String;)V\n    flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n    Code:\n      stack=2, locals=5, args_size=1\n         0: ldc           #2                  // int 2000217\n         2: istore_1\n         3: ldc           #3                  // int 2000218\n         5: istore_2\n         6: ldc           #4                  // int 2000219\n         8: istore_3\n         9: new           #5                  // class com/example/spec/FinalVal\n        12: dup\n        13: invokespecial #6                  // Method com/example/spec/FinalVal.\"<init>\":()V\n        16: astore        4\n        18: invokestatic  #7                  // Method hello:()V\n        21: return\n      LineNumberTable:\n       \t// ... \n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0      22     0  args   [Ljava/lang/String;\n            3      19     1     a   I\n            6      16     2     b   I\n            9      13     3     c   I\n           18       4     4 valObj   Lcom/example/spec/FinalVal;\n\n  public static void hello();\n    descriptor: ()V\n    flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n    Code:\n      stack=2, locals=2, args_size=0\n         0: sipush        4321\n         3: istore_0\n         4: sipush        8642\n         7: istore_1\n         8: getstatic     #8                  // Field OUT:Ljava/io/PrintStream;\n        11: sipush        4321\n        14: invokevirtual #9                  // Method java/io/PrintStream.println:(I)V\n        17: return\n      LineNumberTable:\n       // ...\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            4      14     0 helloA   I\n            8      10     1 helloB   I\n\n  public void hey();\n    descriptor: ()V\n    flags: (0x0001) ACC_PUBLIC\n    Code:\n      stack=2, locals=2, args_size=1\n         0: sipush        9765\n         3: istore_1\n         4: getstatic     #8                  // Field OUT:Ljava/io/PrintStream;\n         7: sipush        9765\n        10: invokevirtual #9                  // Method java/io/PrintStream.println:(I)V\n        13: return\n      LineNumberTable:\n       // ...\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0      14     0  this   Lcom/example/spec/FinalExample;\n            4      10     1 heyVal   I\n\n\t// ...\nSourceFile: \"FinalExample.java\"\n```\n\n## 学习参考\n- [The Java® Language Specification Java SE 8 Edition](https://docs.oracle.com/javase/specs/jls/se8/html/index.html)\n- [The Java® Virtual Machine Specification\nJava SE 8 Edition](https://docs.oracle.com/javase/specs/jvms/se8/html/)","slug":"java-modifiers-final","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clrnaka9m0002ny57f6tr8vpk","content":"<h1 id=\"final\"><a href=\"#final\" class=\"headerlink\" title=\"final\"></a>final</h1><p>初识 final 几年，现在再回头看，是否能够对 final 有新的理解？</p>\n<h2 id=\"Java-语言规范中对-final-的定义\"><a href=\"#Java-语言规范中对-final-的定义\" class=\"headerlink\" title=\"Java 语言规范中对 final 的定义\"></a>Java 语言规范中对 <code>final</code> 的定义</h2><ul>\n<li>修饰类 （Class）：不能被任何类继承</li>\n<li>修饰方法(Method)：不能被子类重写</li>\n<li>修饰变量 (Fields)：完成初始化（静态和实例）后不能被更改</li>\n</ul>\n<h3 id=\"final-Class-§8-1-1-2\"><a href=\"#final-Class-§8-1-1-2\" class=\"headerlink\" title=\"final Class (§8.1.1.2)\"></a>final Class (§8.1.1.2)</h3><p> A class can be declared final if its definition is complete and no subclasses are desired or required.</p>\n<p><strong>It is a compile-time error if the name of a final class appears in the extends clause (§8.1.4) of another class declaration; this implies that a final class cannot have any subclasses.</strong></p>\n<p><strong>It is a compile-time error if a class is declared both final and abstract, because the implementation of such a class could never be completed (§8.1.1.1).</strong></p>\n<p>Because a final class never has any subclasses, the methods of a final class are never overridden (§8.4.8.1).</p>\n<blockquote>\n<p>简单来说：一个类不想要被任何类继承，就用 final 修饰此类。有其他类想继承被 final 修饰类的会在编译期报错的（编译上限制不能被继承），还有一种情况是抽象类想要修饰final 也是会被报错的（和 abstract 所违背，抽象类是让子类去做个继承实现，而 final 的目的是为了不让任何类去继承）。 </p>\n</blockquote>\n<h3 id=\"final-Method-§8-4-3-3\"><a href=\"#final-Method-§8-4-3-3\" class=\"headerlink\" title=\"final Method (§8.4.3.3)\"></a>final Method (§8.4.3.3)</h3><p>A method can be declared final to prevent subclasses from overriding or <code>hiding</code> it.</p>\n<p><strong>It is a compile-time error to attempt to override or hide a final method.</strong></p>\n<p>A private method and all methods declared immediately within a final class behave as if they are final, since it is impossible to override them.</p>\n<blockquote>\n<p>简单来说：防止子类对重写某个方法，用 final 修饰此方法。试图去重写被 final 修饰的父类方法会在编译期报错的。一个私有方法和final修饰类的所有方法表现会像是被final修饰一样的，因为它们不会被重写。</p>\n</blockquote>\n<p><em>At run time, a machine-code generator or optimizer can “inline” the body of a final method, replacing an invocation of the method with the code in its body.<br>The inlining process must preserve the semantics of the method invocation.<br>In particular, if the target of an instance method invocation is null, then a NullPointerException must be thrown even if the method is inlined.<br>A Java compiler must ensure that the exception will be thrown at the correct point, so that the actual arguments to the method will be seen to have been evaluated in the correct order prior to the method invocation.</em></p>\n<blockquote>\n<p>在运行时，机器语言生成器或者是优化器能做“内联”，一个方法调用会把它调用的 final 修饰方法的方法体，调用给合成 final 方法的方法体。在内联的过程中必须得保证方法调用原本的语义，特别是在异常处理上，方法可能是内联的。Java 编译器必须保证异常抛在正确的点上。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Consider the example:  </span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Point</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x, y;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">move</span><span class=\"params\">(<span class=\"type\">int</span> dx, <span class=\"type\">int</span> dy)</span> &#123; x += dx; y += dy; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        Point[] p = <span class=\"keyword\">new</span> <span class=\"title class_\">Point</span>[<span class=\"number\">100</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; p.length; i++) &#123;</span><br><span class=\"line\">            p[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">Point</span>();</span><br><span class=\"line\">            p[i].move(i, p.length-<span class=\"number\">1</span>-i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Inlining the method move of class Point in method main </span></span><br><span class=\"line\"><span class=\"comment\">// would transform the for loop to the form:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 内联 Point 类的 move 会被转换成为这种：</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; p.length; i++) &#123;</span><br><span class=\"line\">        p[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">Point</span>();</span><br><span class=\"line\">        <span class=\"type\">Point</span> <span class=\"variable\">pi</span> <span class=\"operator\">=</span> p[i];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> p.length-<span class=\"number\">1</span>-i;</span><br><span class=\"line\">        pi.x += i;</span><br><span class=\"line\">        pi.y += j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The loop might then be subject to further optimizations.</span></span><br><span class=\"line\"><span class=\"comment\">// Such inlining cannot be done at compile time</span></span><br><span class=\"line\"><span class=\"comment\">// unless it can be guaranteed that Test and Point will always be recompiled together,</span></span><br><span class=\"line\"><span class=\"comment\">// so that whenever Point - and specifically its move method - changes, </span></span><br><span class=\"line\"><span class=\"comment\">// the code for Test.main will also be updated.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个循环可能会被进一步优化。</span></span><br><span class=\"line\"><span class=\"comment\">// 这样的内联不能在编译时做完成</span></span><br><span class=\"line\"><span class=\"comment\">// 除非能够保证 Test 和 Point 总是能够在一起重新编译。</span></span><br><span class=\"line\"><span class=\"comment\">// 这样每次 Point 发生改变，尤其是改变它的move方法，Test.main 也得更新。</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n<h3 id=\"final-Fields\"><a href=\"#final-Fields\" class=\"headerlink\" title=\"final Fields\"></a>final Fields</h3><p> A field can be declared final (§4.12.4). Both class and instance variables (static and non-static fields) may be declared final.<br>A blank final class variable must be definitely assigned by a static initializer of the class in which it is declared, or a compile-time error occurs (§8.7, §16.8).<br>A blank final instance variable must be definitely assigned at the end of every constructor of the class in which it is declared, or a compile-time error occurs (§8.8, §16.9).</p>\n<blockquote>\n<p>简单来说： 一个字段可以被 final 修饰，静态和非静态字段都是可以被final 修饰的。一个未赋值的静态变量必须要在这个类的静态初始化时确定值，否则编译期报错。一个未赋值的实例变量必须要在构造实例结束前确定确定值，否认编译报错。</p>\n</blockquote>\n<h2 id=\"JVM-角度的-final\"><a href=\"#JVM-角度的-final\" class=\"headerlink\" title=\"JVM 角度的 final\"></a>JVM 角度的 final</h2><h3 id=\"final-修饰类的字节码\"><a href=\"#final-修饰类的字节码\" class=\"headerlink\" title=\"final 修饰类的字节码\"></a>final 修饰类的字节码</h3><p>使用 javap 查看被 final 修饰类的字节码中的 <code>acc_flags</code> （用来表示访问全权限）。<br><img src=\"https://source.youchuanlong.com/blog/image-1692081074704.png\" alt=\"image-1692081074704\"></p>\n<p><img src=\"https://source.youchuanlong.com/blog/image-1692080839437.png\" alt=\"image-1692080839437\"></p>\n<blockquote>\n<p> ACC_FINAL: 不允许有子类</p>\n</blockquote>\n<h3 id=\"final-修饰方法\"><a href=\"#final-修饰方法\" class=\"headerlink\" title=\"final 修饰方法\"></a>final 修饰方法</h3><p>方法也是有 <code>acc_flags</code> 和类的一样： ACC_FINAL</p>\n<p><img src=\"https://source.youchuanlong.com/blog/image-1692081629277.png\" alt=\"image-1692081629277\"></p>\n<blockquote>\n<p>ACC_FINAL: 不允许被覆盖。</p>\n</blockquote>\n<h3 id=\"final-修饰的变量\"><a href=\"#final-修饰的变量\" class=\"headerlink\" title=\"final 修饰的变量\"></a>final 修饰的变量</h3><p>变量也有 <code>acc_flags</code> ,同上：ACC_FINAL。</p>\n<p><img src=\"https://source.youchuanlong.com/blog/image-1692082038697.png\" alt=\"image-1692082038697\"></p>\n<blockquote>\n<p>ACC_FLAGS: 在创建对象后不会被改变</p>\n</blockquote>\n<p>是变量就会和存储有关，看看有什么不同吗。</p>\n<h4 id=\"静态-final-变量\"><a href=\"#静态-final-变量\" class=\"headerlink\" title=\"静态 final 变量\"></a>静态 final 变量</h4><p>在一般情况下，我们要定义常量，一般都推荐用 final 修饰静态变量，保证常量不可变。</p>\n<p>final 修饰是静态变量是放在字节码的常量池，A 类 调用定义在 B 类中定义的常量，该常量直接放在 A 类的常量池。（Classloader 没加载 B.class 也是可以的，意味着不会触发 B 被加载，可以把 B 的 class 文件给删掉来验证。）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A:  FinalExample class </span></span><br><span class=\"line\"><span class=\"keyword\">public</span>  <span class=\"keyword\">class</span> <span class=\"title class_\">FinalExample</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">// 调用另一个类的常量</span></span><br><span class=\"line\">\t\tSystem.out.println(FinalConst.CONST);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// B: FinalConst class </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FinalConst</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">CONST</span> <span class=\"operator\">=</span> <span class=\"number\">20230815</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>FinalExample 的常量池和 main 方法中的调用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// #### 常量池：</span><br><span class=\"line\">Constant pool:</span><br><span class=\"line\">   #1 = Methodref          #7.#21         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class=\"line\">   #2 = Fieldref           #22.#23        // java/lang/System.out:Ljava/io/PrintStream;</span><br><span class=\"line\">   #3 = Class              #24            // com/example/spec/FinalConst</span><br><span class=\"line\">   #4 = Integer            20230815     // 可以看到在定义的常量</span><br><span class=\"line\">   # ...</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  // ... </span><br><span class=\"line\">  public static void main(java.lang.String[]);</span><br><span class=\"line\">    descriptor: ([Ljava/lang/String;)V</span><br><span class=\"line\">    flags: (0x0009) ACC_PUBLIC, ACC_STATIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=2, locals=1, args_size=1</span><br><span class=\"line\">         0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class=\"line\">         3: ldc           #4                  // int 20230815 ，ldc: 将常量池的操作数 push 到操作栈中</span><br><span class=\"line\">         5: invokevirtual #5                  // Method java/io/PrintStream.println:(I)V</span><br><span class=\"line\">         8: return</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 12: 0</span><br><span class=\"line\">        line 13: 8</span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">            0       9     0  args   [Ljava/lang/String;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"加-final-和-不加-final-的静态变量有什么不同？\"><a href=\"#加-final-和-不加-final-的静态变量有什么不同？\" class=\"headerlink\" title=\"加 final 和 不加 final 的静态变量有什么不同？\"></a>加 final 和 不加 final 的静态变量有什么不同？</h5><ul>\n<li>我验证的不加 final 也会存在常量池中 ？？？</li>\n<li>ChatGTP:<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Question: </span><br><span class=\"line\"></span><br><span class=\"line\">加 final 和 不加final 修饰的静态变量，除了保证不可变外有什么区别 ，都会存常量池吗?</span><br><span class=\"line\"></span><br><span class=\"line\"># Answer:</span><br><span class=\"line\"></span><br><span class=\"line\">不是所有的静态变量都会被存储在常量池中，final 修饰的静态变量和非 final 修饰的静态变量在这方面可能会有一些区别。让我解释一下：</span><br><span class=\"line\"></span><br><span class=\"line\">final 修饰的静态变量： 使用 final 修饰的静态变量在编译期间就会被确定其值，并且在类加载时进行初始化。这种情况下，它们的值会被存储在常量池中，以便在编译时被优化和直接使用。因此，final 修饰的静态变量通常会存储在常量池中。</span><br><span class=\"line\"></span><br><span class=\"line\">非 final 修饰的静态变量： 非 final 修饰的静态变量的值在编译期间无法确定，它们会在类加载时被初始化。这些变量的值不会被存储在常量池中，而是存储在类的静态变量区域中。</span><br><span class=\"line\"></span><br><span class=\"line\">需要注意的是，即使变量的值存储在常量池中，其内存地址并不一定相同。在某些情况下，不同的类加载器可能会导致同一个常量池中的值在内存中存在多个副本。这取决于类加载器的实现和加载过程。</span><br><span class=\"line\"></span><br><span class=\"line\">综上所述，final 修饰的静态变量通常会存储在常量池中，但非 final 修饰的静态变量的值会存储在静态变量区域中，而不是常量池。</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"实例-final-变量\"><a href=\"#实例-final-变量\" class=\"headerlink\" title=\"实例 final 变量\"></a>实例 final 变量</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span>  <span class=\"keyword\">class</span> <span class=\"title class_\">FinalExample</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 没有 final 修饰的实例</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">1999</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// final 修饰的实例变量</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">val</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FinalVal</span>().x;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">val2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FinalExample</span>().y;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FinalVal</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">20230815</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Constant pool:</span><br><span class=\"line\">   #1 = Methodref          #9.#27         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class=\"line\">   #2 = Fieldref           #7.#28         // com/example/spec/FinalExample.y:I</span><br><span class=\"line\">   #3 = Class              #29            // com/example/spec/FinalVal</span><br><span class=\"line\">   #4 = Methodref          #3.#27         //  com/example/spec/FinalVal.&quot;&lt;init&gt;&quot;:()V</span><br><span class=\"line\">   #5 = Methodref          #30.#31        // java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;</span><br><span class=\"line\">   #6 = Integer            20230815  // 可以看到常量池中有final 声明的实例常量的值</span><br><span class=\"line\">  #...</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 无参实例方法</span><br><span class=\"line\">  public com.example.spec.FinalExample();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: (0x0001) ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=2, locals=1, args_size=1</span><br><span class=\"line\">         0: aload_0</span><br><span class=\"line\">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class=\"line\">         4: aload_0</span><br><span class=\"line\">         5: sipush        1999  // 可以看到实例变量其实是在构造中赋值的</span><br><span class=\"line\">         8: putfield      #2                  // Field y:I</span><br><span class=\"line\">        11: return</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 7: 0</span><br><span class=\"line\">        line 12: 4</span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">            0      12     0  this   Lcom/example/spec/FinalExample;</span><br><span class=\"line\"></span><br><span class=\"line\">  public static void main(java.lang.String[]);</span><br><span class=\"line\">    descriptor: ([Ljava/lang/String;)V</span><br><span class=\"line\">    flags: (0x0009) ACC_PUBLIC, ACC_STATIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=2, locals=3, args_size=1</span><br><span class=\"line\">         0: new           #3                  // class com/example/spec/FinalVal</span><br><span class=\"line\">         3: dup</span><br><span class=\"line\">         4: invokespecial #4                  // Method com/example/spec/FinalVal.&quot;&lt;init&gt;&quot;:()V</span><br><span class=\"line\">         7: invokestatic  #5                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;</span><br><span class=\"line\">        10: pop</span><br><span class=\"line\">        11: ldc           #6                  // int 20230815</span><br><span class=\"line\">        13: istore_1</span><br><span class=\"line\">        14: new           #7                  // class com/example/spec/FinalExample</span><br><span class=\"line\">        17: dup</span><br><span class=\"line\">        18: invokespecial #8                  // Method &quot;&lt;init&gt;&quot;:()V</span><br><span class=\"line\">        21: getfield      #2                  // Field y:I,getfield</span><br><span class=\"line\">        24: istore_2</span><br><span class=\"line\">        25: return</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 16: 0</span><br><span class=\"line\">        line 17: 14</span><br><span class=\"line\">        line 18: 25</span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">            0      26     0  args   [Ljava/lang/String;</span><br><span class=\"line\">           14      12     1   val   I</span><br><span class=\"line\">           25       1     2  val2   I</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SourceFile: &quot;FinalExample.java&quot;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"局部-final-变量\"><a href=\"#局部-final-变量\" class=\"headerlink\" title=\"局部 final 变量\"></a>局部 final 变量</h4><p>平时会用 final 在修饰局部变量，在它本身的语义上保证变量不可变，另外来提高代码的阅读性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 表明这个变量值不要改动。（个人习惯）</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"variable\">isInterruptIfRunning</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">future.cancel(isInterruptIfRunning);</span><br></pre></td></tr></table></figure>\n<p>发现 final 在一般的方法中修饰变量，除了保持final的特性外，没什么不同，都是存储在局部方法的局部变量中。但是 main 方法中的修饰的变量除了局部变量表外，还会存在常量池中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.spec;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.PrintStream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> YouChuanlong</span></span><br><span class=\"line\"><span class=\"comment\"> * Created at 2023/8/15 14:18</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>  <span class=\"keyword\">class</span> <span class=\"title class_\">FinalExample</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">PrintStream</span> <span class=\"variable\">OUT</span> <span class=\"operator\">=</span> System.out;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// main 方法中声明的变量也会存在常量池中</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">2000217</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">2000218</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"number\">2000219</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">FinalVal</span> <span class=\"variable\">valObj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FinalVal</span>();  <span class=\"comment\">// 验证对象</span></span><br><span class=\"line\">\t\thello();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">hello</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 静态方法中修饰变量</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">helloA</span> <span class=\"operator\">=</span> <span class=\"number\">4321</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">helloB</span> <span class=\"operator\">=</span> <span class=\"number\">8642</span>; <span class=\"comment\">// A B 指令是否相同</span></span><br><span class=\"line\">\t\tOUT.println(helloA);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">hey</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 实例方法中修饰变量</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">heyVal</span> <span class=\"operator\">=</span> <span class=\"number\">9765</span>;</span><br><span class=\"line\">\t\tOUT.println(heyVal);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> # 常量池</span><br><span class=\"line\">Constant pool:</span><br><span class=\"line\">   #1 = Methodref          #12.#40        // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class=\"line\">   #2 = Integer            2000217\t      // main 方法中定义\t</span><br><span class=\"line\">   #3 = Integer            2000218\t\t  // main 方法中定义</span><br><span class=\"line\">   #4 = Integer            2000219\t\t  // main 方法中定义</span><br><span class=\"line\">   #5 = Class              #41            // com/example/spec/FinalVal</span><br><span class=\"line\">   #6 = Methodref          #5.#40         // com/example/spec/FinalVal.&quot;&lt;init&gt;&quot;:()V</span><br><span class=\"line\">   #7 = Methodref          #11.#42        // com/example/spec/FinalExample.hello:()V</span><br><span class=\"line\">   #8 = Fieldref           #11.#43        // com/example/spec/FinalExample.OUT:Ljava/io/PrintStream;</span><br><span class=\"line\">   // ... </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  // ...</span><br><span class=\"line\">  public static void main(java.lang.String[]);</span><br><span class=\"line\">    descriptor: ([Ljava/lang/String;)V</span><br><span class=\"line\">    flags: (0x0009) ACC_PUBLIC, ACC_STATIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=2, locals=5, args_size=1</span><br><span class=\"line\">         0: ldc           #2                  // int 2000217</span><br><span class=\"line\">         2: istore_1</span><br><span class=\"line\">         3: ldc           #3                  // int 2000218</span><br><span class=\"line\">         5: istore_2</span><br><span class=\"line\">         6: ldc           #4                  // int 2000219</span><br><span class=\"line\">         8: istore_3</span><br><span class=\"line\">         9: new           #5                  // class com/example/spec/FinalVal</span><br><span class=\"line\">        12: dup</span><br><span class=\"line\">        13: invokespecial #6                  // Method com/example/spec/FinalVal.&quot;&lt;init&gt;&quot;:()V</span><br><span class=\"line\">        16: astore        4</span><br><span class=\"line\">        18: invokestatic  #7                  // Method hello:()V</span><br><span class=\"line\">        21: return</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">       \t// ... </span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">            0      22     0  args   [Ljava/lang/String;</span><br><span class=\"line\">            3      19     1     a   I</span><br><span class=\"line\">            6      16     2     b   I</span><br><span class=\"line\">            9      13     3     c   I</span><br><span class=\"line\">           18       4     4 valObj   Lcom/example/spec/FinalVal;</span><br><span class=\"line\"></span><br><span class=\"line\">  public static void hello();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: (0x0009) ACC_PUBLIC, ACC_STATIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=2, locals=2, args_size=0</span><br><span class=\"line\">         0: sipush        4321</span><br><span class=\"line\">         3: istore_0</span><br><span class=\"line\">         4: sipush        8642</span><br><span class=\"line\">         7: istore_1</span><br><span class=\"line\">         8: getstatic     #8                  // Field OUT:Ljava/io/PrintStream;</span><br><span class=\"line\">        11: sipush        4321</span><br><span class=\"line\">        14: invokevirtual #9                  // Method java/io/PrintStream.println:(I)V</span><br><span class=\"line\">        17: return</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">       // ...</span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">            4      14     0 helloA   I</span><br><span class=\"line\">            8      10     1 helloB   I</span><br><span class=\"line\"></span><br><span class=\"line\">  public void hey();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: (0x0001) ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=2, locals=2, args_size=1</span><br><span class=\"line\">         0: sipush        9765</span><br><span class=\"line\">         3: istore_1</span><br><span class=\"line\">         4: getstatic     #8                  // Field OUT:Ljava/io/PrintStream;</span><br><span class=\"line\">         7: sipush        9765</span><br><span class=\"line\">        10: invokevirtual #9                  // Method java/io/PrintStream.println:(I)V</span><br><span class=\"line\">        13: return</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">       // ...</span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">            0      14     0  this   Lcom/example/spec/FinalExample;</span><br><span class=\"line\">            4      10     1 heyVal   I</span><br><span class=\"line\"></span><br><span class=\"line\">\t// ...</span><br><span class=\"line\">SourceFile: &quot;FinalExample.java&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"学习参考\"><a href=\"#学习参考\" class=\"headerlink\" title=\"学习参考\"></a>学习参考</h2><ul>\n<li><a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/index.html\">The Java® Language Specification Java SE 8 Edition</a></li>\n<li><a href=\"https://docs.oracle.com/javase/specs/jvms/se8/html/\">The Java® Virtual Machine Specification<br>Java SE 8 Edition</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"final\"><a href=\"#final\" class=\"headerlink\" title=\"final\"></a>final</h1><p>初识 final 几年，现在再回头看，是否能够对 final 有新的理解？</p>\n<h2 id=\"Java-语言规范中对-final-的定义\"><a href=\"#Java-语言规范中对-final-的定义\" class=\"headerlink\" title=\"Java 语言规范中对 final 的定义\"></a>Java 语言规范中对 <code>final</code> 的定义</h2><ul>\n<li>修饰类 （Class）：不能被任何类继承</li>\n<li>修饰方法(Method)：不能被子类重写</li>\n<li>修饰变量 (Fields)：完成初始化（静态和实例）后不能被更改</li>\n</ul>\n<h3 id=\"final-Class-§8-1-1-2\"><a href=\"#final-Class-§8-1-1-2\" class=\"headerlink\" title=\"final Class (§8.1.1.2)\"></a>final Class (§8.1.1.2)</h3><p> A class can be declared final if its definition is complete and no subclasses are desired or required.</p>\n<p><strong>It is a compile-time error if the name of a final class appears in the extends clause (§8.1.4) of another class declaration; this implies that a final class cannot have any subclasses.</strong></p>\n<p><strong>It is a compile-time error if a class is declared both final and abstract, because the implementation of such a class could never be completed (§8.1.1.1).</strong></p>\n<p>Because a final class never has any subclasses, the methods of a final class are never overridden (§8.4.8.1).</p>\n<blockquote>\n<p>简单来说：一个类不想要被任何类继承，就用 final 修饰此类。有其他类想继承被 final 修饰类的会在编译期报错的（编译上限制不能被继承），还有一种情况是抽象类想要修饰final 也是会被报错的（和 abstract 所违背，抽象类是让子类去做个继承实现，而 final 的目的是为了不让任何类去继承）。 </p>\n</blockquote>\n<h3 id=\"final-Method-§8-4-3-3\"><a href=\"#final-Method-§8-4-3-3\" class=\"headerlink\" title=\"final Method (§8.4.3.3)\"></a>final Method (§8.4.3.3)</h3><p>A method can be declared final to prevent subclasses from overriding or <code>hiding</code> it.</p>\n<p><strong>It is a compile-time error to attempt to override or hide a final method.</strong></p>\n<p>A private method and all methods declared immediately within a final class behave as if they are final, since it is impossible to override them.</p>\n<blockquote>\n<p>简单来说：防止子类对重写某个方法，用 final 修饰此方法。试图去重写被 final 修饰的父类方法会在编译期报错的。一个私有方法和final修饰类的所有方法表现会像是被final修饰一样的，因为它们不会被重写。</p>\n</blockquote>\n<p><em>At run time, a machine-code generator or optimizer can “inline” the body of a final method, replacing an invocation of the method with the code in its body.<br>The inlining process must preserve the semantics of the method invocation.<br>In particular, if the target of an instance method invocation is null, then a NullPointerException must be thrown even if the method is inlined.<br>A Java compiler must ensure that the exception will be thrown at the correct point, so that the actual arguments to the method will be seen to have been evaluated in the correct order prior to the method invocation.</em></p>\n<blockquote>\n<p>在运行时，机器语言生成器或者是优化器能做“内联”，一个方法调用会把它调用的 final 修饰方法的方法体，调用给合成 final 方法的方法体。在内联的过程中必须得保证方法调用原本的语义，特别是在异常处理上，方法可能是内联的。Java 编译器必须保证异常抛在正确的点上。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Consider the example:  </span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Point</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x, y;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">move</span><span class=\"params\">(<span class=\"type\">int</span> dx, <span class=\"type\">int</span> dy)</span> &#123; x += dx; y += dy; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        Point[] p = <span class=\"keyword\">new</span> <span class=\"title class_\">Point</span>[<span class=\"number\">100</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; p.length; i++) &#123;</span><br><span class=\"line\">            p[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">Point</span>();</span><br><span class=\"line\">            p[i].move(i, p.length-<span class=\"number\">1</span>-i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Inlining the method move of class Point in method main </span></span><br><span class=\"line\"><span class=\"comment\">// would transform the for loop to the form:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 内联 Point 类的 move 会被转换成为这种：</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; p.length; i++) &#123;</span><br><span class=\"line\">        p[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">Point</span>();</span><br><span class=\"line\">        <span class=\"type\">Point</span> <span class=\"variable\">pi</span> <span class=\"operator\">=</span> p[i];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> p.length-<span class=\"number\">1</span>-i;</span><br><span class=\"line\">        pi.x += i;</span><br><span class=\"line\">        pi.y += j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The loop might then be subject to further optimizations.</span></span><br><span class=\"line\"><span class=\"comment\">// Such inlining cannot be done at compile time</span></span><br><span class=\"line\"><span class=\"comment\">// unless it can be guaranteed that Test and Point will always be recompiled together,</span></span><br><span class=\"line\"><span class=\"comment\">// so that whenever Point - and specifically its move method - changes, </span></span><br><span class=\"line\"><span class=\"comment\">// the code for Test.main will also be updated.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个循环可能会被进一步优化。</span></span><br><span class=\"line\"><span class=\"comment\">// 这样的内联不能在编译时做完成</span></span><br><span class=\"line\"><span class=\"comment\">// 除非能够保证 Test 和 Point 总是能够在一起重新编译。</span></span><br><span class=\"line\"><span class=\"comment\">// 这样每次 Point 发生改变，尤其是改变它的move方法，Test.main 也得更新。</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n<h3 id=\"final-Fields\"><a href=\"#final-Fields\" class=\"headerlink\" title=\"final Fields\"></a>final Fields</h3><p> A field can be declared final (§4.12.4). Both class and instance variables (static and non-static fields) may be declared final.<br>A blank final class variable must be definitely assigned by a static initializer of the class in which it is declared, or a compile-time error occurs (§8.7, §16.8).<br>A blank final instance variable must be definitely assigned at the end of every constructor of the class in which it is declared, or a compile-time error occurs (§8.8, §16.9).</p>\n<blockquote>\n<p>简单来说： 一个字段可以被 final 修饰，静态和非静态字段都是可以被final 修饰的。一个未赋值的静态变量必须要在这个类的静态初始化时确定值，否则编译期报错。一个未赋值的实例变量必须要在构造实例结束前确定确定值，否认编译报错。</p>\n</blockquote>\n<h2 id=\"JVM-角度的-final\"><a href=\"#JVM-角度的-final\" class=\"headerlink\" title=\"JVM 角度的 final\"></a>JVM 角度的 final</h2><h3 id=\"final-修饰类的字节码\"><a href=\"#final-修饰类的字节码\" class=\"headerlink\" title=\"final 修饰类的字节码\"></a>final 修饰类的字节码</h3><p>使用 javap 查看被 final 修饰类的字节码中的 <code>acc_flags</code> （用来表示访问全权限）。<br><img src=\"https://source.youchuanlong.com/blog/image-1692081074704.png\" alt=\"image-1692081074704\"></p>\n<p><img src=\"https://source.youchuanlong.com/blog/image-1692080839437.png\" alt=\"image-1692080839437\"></p>\n<blockquote>\n<p> ACC_FINAL: 不允许有子类</p>\n</blockquote>\n<h3 id=\"final-修饰方法\"><a href=\"#final-修饰方法\" class=\"headerlink\" title=\"final 修饰方法\"></a>final 修饰方法</h3><p>方法也是有 <code>acc_flags</code> 和类的一样： ACC_FINAL</p>\n<p><img src=\"https://source.youchuanlong.com/blog/image-1692081629277.png\" alt=\"image-1692081629277\"></p>\n<blockquote>\n<p>ACC_FINAL: 不允许被覆盖。</p>\n</blockquote>\n<h3 id=\"final-修饰的变量\"><a href=\"#final-修饰的变量\" class=\"headerlink\" title=\"final 修饰的变量\"></a>final 修饰的变量</h3><p>变量也有 <code>acc_flags</code> ,同上：ACC_FINAL。</p>\n<p><img src=\"https://source.youchuanlong.com/blog/image-1692082038697.png\" alt=\"image-1692082038697\"></p>\n<blockquote>\n<p>ACC_FLAGS: 在创建对象后不会被改变</p>\n</blockquote>\n<p>是变量就会和存储有关，看看有什么不同吗。</p>\n<h4 id=\"静态-final-变量\"><a href=\"#静态-final-变量\" class=\"headerlink\" title=\"静态 final 变量\"></a>静态 final 变量</h4><p>在一般情况下，我们要定义常量，一般都推荐用 final 修饰静态变量，保证常量不可变。</p>\n<p>final 修饰是静态变量是放在字节码的常量池，A 类 调用定义在 B 类中定义的常量，该常量直接放在 A 类的常量池。（Classloader 没加载 B.class 也是可以的，意味着不会触发 B 被加载，可以把 B 的 class 文件给删掉来验证。）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A:  FinalExample class </span></span><br><span class=\"line\"><span class=\"keyword\">public</span>  <span class=\"keyword\">class</span> <span class=\"title class_\">FinalExample</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">// 调用另一个类的常量</span></span><br><span class=\"line\">\t\tSystem.out.println(FinalConst.CONST);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// B: FinalConst class </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FinalConst</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">CONST</span> <span class=\"operator\">=</span> <span class=\"number\">20230815</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>FinalExample 的常量池和 main 方法中的调用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// #### 常量池：</span><br><span class=\"line\">Constant pool:</span><br><span class=\"line\">   #1 = Methodref          #7.#21         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class=\"line\">   #2 = Fieldref           #22.#23        // java/lang/System.out:Ljava/io/PrintStream;</span><br><span class=\"line\">   #3 = Class              #24            // com/example/spec/FinalConst</span><br><span class=\"line\">   #4 = Integer            20230815     // 可以看到在定义的常量</span><br><span class=\"line\">   # ...</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  // ... </span><br><span class=\"line\">  public static void main(java.lang.String[]);</span><br><span class=\"line\">    descriptor: ([Ljava/lang/String;)V</span><br><span class=\"line\">    flags: (0x0009) ACC_PUBLIC, ACC_STATIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=2, locals=1, args_size=1</span><br><span class=\"line\">         0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class=\"line\">         3: ldc           #4                  // int 20230815 ，ldc: 将常量池的操作数 push 到操作栈中</span><br><span class=\"line\">         5: invokevirtual #5                  // Method java/io/PrintStream.println:(I)V</span><br><span class=\"line\">         8: return</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 12: 0</span><br><span class=\"line\">        line 13: 8</span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">            0       9     0  args   [Ljava/lang/String;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"加-final-和-不加-final-的静态变量有什么不同？\"><a href=\"#加-final-和-不加-final-的静态变量有什么不同？\" class=\"headerlink\" title=\"加 final 和 不加 final 的静态变量有什么不同？\"></a>加 final 和 不加 final 的静态变量有什么不同？</h5><ul>\n<li>我验证的不加 final 也会存在常量池中 ？？？</li>\n<li>ChatGTP:<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Question: </span><br><span class=\"line\"></span><br><span class=\"line\">加 final 和 不加final 修饰的静态变量，除了保证不可变外有什么区别 ，都会存常量池吗?</span><br><span class=\"line\"></span><br><span class=\"line\"># Answer:</span><br><span class=\"line\"></span><br><span class=\"line\">不是所有的静态变量都会被存储在常量池中，final 修饰的静态变量和非 final 修饰的静态变量在这方面可能会有一些区别。让我解释一下：</span><br><span class=\"line\"></span><br><span class=\"line\">final 修饰的静态变量： 使用 final 修饰的静态变量在编译期间就会被确定其值，并且在类加载时进行初始化。这种情况下，它们的值会被存储在常量池中，以便在编译时被优化和直接使用。因此，final 修饰的静态变量通常会存储在常量池中。</span><br><span class=\"line\"></span><br><span class=\"line\">非 final 修饰的静态变量： 非 final 修饰的静态变量的值在编译期间无法确定，它们会在类加载时被初始化。这些变量的值不会被存储在常量池中，而是存储在类的静态变量区域中。</span><br><span class=\"line\"></span><br><span class=\"line\">需要注意的是，即使变量的值存储在常量池中，其内存地址并不一定相同。在某些情况下，不同的类加载器可能会导致同一个常量池中的值在内存中存在多个副本。这取决于类加载器的实现和加载过程。</span><br><span class=\"line\"></span><br><span class=\"line\">综上所述，final 修饰的静态变量通常会存储在常量池中，但非 final 修饰的静态变量的值会存储在静态变量区域中，而不是常量池。</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"实例-final-变量\"><a href=\"#实例-final-变量\" class=\"headerlink\" title=\"实例 final 变量\"></a>实例 final 变量</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span>  <span class=\"keyword\">class</span> <span class=\"title class_\">FinalExample</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 没有 final 修饰的实例</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">1999</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// final 修饰的实例变量</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">val</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FinalVal</span>().x;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">val2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FinalExample</span>().y;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FinalVal</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">20230815</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Constant pool:</span><br><span class=\"line\">   #1 = Methodref          #9.#27         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class=\"line\">   #2 = Fieldref           #7.#28         // com/example/spec/FinalExample.y:I</span><br><span class=\"line\">   #3 = Class              #29            // com/example/spec/FinalVal</span><br><span class=\"line\">   #4 = Methodref          #3.#27         //  com/example/spec/FinalVal.&quot;&lt;init&gt;&quot;:()V</span><br><span class=\"line\">   #5 = Methodref          #30.#31        // java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;</span><br><span class=\"line\">   #6 = Integer            20230815  // 可以看到常量池中有final 声明的实例常量的值</span><br><span class=\"line\">  #...</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 无参实例方法</span><br><span class=\"line\">  public com.example.spec.FinalExample();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: (0x0001) ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=2, locals=1, args_size=1</span><br><span class=\"line\">         0: aload_0</span><br><span class=\"line\">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class=\"line\">         4: aload_0</span><br><span class=\"line\">         5: sipush        1999  // 可以看到实例变量其实是在构造中赋值的</span><br><span class=\"line\">         8: putfield      #2                  // Field y:I</span><br><span class=\"line\">        11: return</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 7: 0</span><br><span class=\"line\">        line 12: 4</span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">            0      12     0  this   Lcom/example/spec/FinalExample;</span><br><span class=\"line\"></span><br><span class=\"line\">  public static void main(java.lang.String[]);</span><br><span class=\"line\">    descriptor: ([Ljava/lang/String;)V</span><br><span class=\"line\">    flags: (0x0009) ACC_PUBLIC, ACC_STATIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=2, locals=3, args_size=1</span><br><span class=\"line\">         0: new           #3                  // class com/example/spec/FinalVal</span><br><span class=\"line\">         3: dup</span><br><span class=\"line\">         4: invokespecial #4                  // Method com/example/spec/FinalVal.&quot;&lt;init&gt;&quot;:()V</span><br><span class=\"line\">         7: invokestatic  #5                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;</span><br><span class=\"line\">        10: pop</span><br><span class=\"line\">        11: ldc           #6                  // int 20230815</span><br><span class=\"line\">        13: istore_1</span><br><span class=\"line\">        14: new           #7                  // class com/example/spec/FinalExample</span><br><span class=\"line\">        17: dup</span><br><span class=\"line\">        18: invokespecial #8                  // Method &quot;&lt;init&gt;&quot;:()V</span><br><span class=\"line\">        21: getfield      #2                  // Field y:I,getfield</span><br><span class=\"line\">        24: istore_2</span><br><span class=\"line\">        25: return</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 16: 0</span><br><span class=\"line\">        line 17: 14</span><br><span class=\"line\">        line 18: 25</span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">            0      26     0  args   [Ljava/lang/String;</span><br><span class=\"line\">           14      12     1   val   I</span><br><span class=\"line\">           25       1     2  val2   I</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SourceFile: &quot;FinalExample.java&quot;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"局部-final-变量\"><a href=\"#局部-final-变量\" class=\"headerlink\" title=\"局部 final 变量\"></a>局部 final 变量</h4><p>平时会用 final 在修饰局部变量，在它本身的语义上保证变量不可变，另外来提高代码的阅读性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 表明这个变量值不要改动。（个人习惯）</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"variable\">isInterruptIfRunning</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">future.cancel(isInterruptIfRunning);</span><br></pre></td></tr></table></figure>\n<p>发现 final 在一般的方法中修饰变量，除了保持final的特性外，没什么不同，都是存储在局部方法的局部变量中。但是 main 方法中的修饰的变量除了局部变量表外，还会存在常量池中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.spec;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.PrintStream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> YouChuanlong</span></span><br><span class=\"line\"><span class=\"comment\"> * Created at 2023/8/15 14:18</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>  <span class=\"keyword\">class</span> <span class=\"title class_\">FinalExample</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">PrintStream</span> <span class=\"variable\">OUT</span> <span class=\"operator\">=</span> System.out;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// main 方法中声明的变量也会存在常量池中</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">2000217</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">2000218</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"number\">2000219</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">FinalVal</span> <span class=\"variable\">valObj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FinalVal</span>();  <span class=\"comment\">// 验证对象</span></span><br><span class=\"line\">\t\thello();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">hello</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 静态方法中修饰变量</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">helloA</span> <span class=\"operator\">=</span> <span class=\"number\">4321</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">helloB</span> <span class=\"operator\">=</span> <span class=\"number\">8642</span>; <span class=\"comment\">// A B 指令是否相同</span></span><br><span class=\"line\">\t\tOUT.println(helloA);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">hey</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 实例方法中修饰变量</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">heyVal</span> <span class=\"operator\">=</span> <span class=\"number\">9765</span>;</span><br><span class=\"line\">\t\tOUT.println(heyVal);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> # 常量池</span><br><span class=\"line\">Constant pool:</span><br><span class=\"line\">   #1 = Methodref          #12.#40        // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class=\"line\">   #2 = Integer            2000217\t      // main 方法中定义\t</span><br><span class=\"line\">   #3 = Integer            2000218\t\t  // main 方法中定义</span><br><span class=\"line\">   #4 = Integer            2000219\t\t  // main 方法中定义</span><br><span class=\"line\">   #5 = Class              #41            // com/example/spec/FinalVal</span><br><span class=\"line\">   #6 = Methodref          #5.#40         // com/example/spec/FinalVal.&quot;&lt;init&gt;&quot;:()V</span><br><span class=\"line\">   #7 = Methodref          #11.#42        // com/example/spec/FinalExample.hello:()V</span><br><span class=\"line\">   #8 = Fieldref           #11.#43        // com/example/spec/FinalExample.OUT:Ljava/io/PrintStream;</span><br><span class=\"line\">   // ... </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  // ...</span><br><span class=\"line\">  public static void main(java.lang.String[]);</span><br><span class=\"line\">    descriptor: ([Ljava/lang/String;)V</span><br><span class=\"line\">    flags: (0x0009) ACC_PUBLIC, ACC_STATIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=2, locals=5, args_size=1</span><br><span class=\"line\">         0: ldc           #2                  // int 2000217</span><br><span class=\"line\">         2: istore_1</span><br><span class=\"line\">         3: ldc           #3                  // int 2000218</span><br><span class=\"line\">         5: istore_2</span><br><span class=\"line\">         6: ldc           #4                  // int 2000219</span><br><span class=\"line\">         8: istore_3</span><br><span class=\"line\">         9: new           #5                  // class com/example/spec/FinalVal</span><br><span class=\"line\">        12: dup</span><br><span class=\"line\">        13: invokespecial #6                  // Method com/example/spec/FinalVal.&quot;&lt;init&gt;&quot;:()V</span><br><span class=\"line\">        16: astore        4</span><br><span class=\"line\">        18: invokestatic  #7                  // Method hello:()V</span><br><span class=\"line\">        21: return</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">       \t// ... </span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">            0      22     0  args   [Ljava/lang/String;</span><br><span class=\"line\">            3      19     1     a   I</span><br><span class=\"line\">            6      16     2     b   I</span><br><span class=\"line\">            9      13     3     c   I</span><br><span class=\"line\">           18       4     4 valObj   Lcom/example/spec/FinalVal;</span><br><span class=\"line\"></span><br><span class=\"line\">  public static void hello();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: (0x0009) ACC_PUBLIC, ACC_STATIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=2, locals=2, args_size=0</span><br><span class=\"line\">         0: sipush        4321</span><br><span class=\"line\">         3: istore_0</span><br><span class=\"line\">         4: sipush        8642</span><br><span class=\"line\">         7: istore_1</span><br><span class=\"line\">         8: getstatic     #8                  // Field OUT:Ljava/io/PrintStream;</span><br><span class=\"line\">        11: sipush        4321</span><br><span class=\"line\">        14: invokevirtual #9                  // Method java/io/PrintStream.println:(I)V</span><br><span class=\"line\">        17: return</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">       // ...</span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">            4      14     0 helloA   I</span><br><span class=\"line\">            8      10     1 helloB   I</span><br><span class=\"line\"></span><br><span class=\"line\">  public void hey();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: (0x0001) ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=2, locals=2, args_size=1</span><br><span class=\"line\">         0: sipush        9765</span><br><span class=\"line\">         3: istore_1</span><br><span class=\"line\">         4: getstatic     #8                  // Field OUT:Ljava/io/PrintStream;</span><br><span class=\"line\">         7: sipush        9765</span><br><span class=\"line\">        10: invokevirtual #9                  // Method java/io/PrintStream.println:(I)V</span><br><span class=\"line\">        13: return</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">       // ...</span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">            0      14     0  this   Lcom/example/spec/FinalExample;</span><br><span class=\"line\">            4      10     1 heyVal   I</span><br><span class=\"line\"></span><br><span class=\"line\">\t// ...</span><br><span class=\"line\">SourceFile: &quot;FinalExample.java&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"学习参考\"><a href=\"#学习参考\" class=\"headerlink\" title=\"学习参考\"></a>学习参考</h2><ul>\n<li><a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/index.html\">The Java® Language Specification Java SE 8 Edition</a></li>\n<li><a href=\"https://docs.oracle.com/javase/specs/jvms/se8/html/\">The Java® Virtual Machine Specification<br>Java SE 8 Edition</a></li>\n</ul>\n"},{"title":"Mac 上用 clang 编译找不到标准库","date":"2024-01-16T12:46:40.719Z","updated":"2024-01-16T13:07:53.699Z","url":"/archives/mac-clang-stdioh-error","_content":"\n# clang error: 'stdio.h' file not found \n\n前一段时间碰到这问题是在 GoLand 编译 Go 语言项目时报的找不到标准库。在终端用 clang 来编译也如此。\n\n\n> 我的系统版本\n```bash\n$ sw_vers\n\nProductName:\tmacOS\nProductVersion:\t12.7.2\n```\n\n> 编译 go 项目时 cgo 报的错误：\n```bash\n# runtime/cgo\n_cgo_export.c:3:10: fatal error: 'stdlib.h' file not found\n```\n\n> 在终端使用 clang 编译 c 文件：\n```c\n#include<stdio.h>\nint main() {\n    printf(\"Hello\\n\");\n    return 0;\n}\n// file: main.c \n```\n\n\n```shell\ncc main.c  -o main\nmain.c:1:9: fatal error: 'stdio.h' file not found\n#include<stdio.h>\n        ^~~~~~~~~\n1 error generated.\n```\n\n\n\n网上大部分的方法是去重新让 xcode 重装命令工具，对我来说没有解决此问题。\n\n最后找到解决方法是在添加一个 SDKROOT 环境变量：[帖子地址（Stackoverflow: Cannot find stdio.h）](https://stackoverflow.com/questions/51761599/cannot-find-stdio-h)\n\n\n### 方法一：添加环境变量\n先试下是否可行，能解决再添加到 `~/.bash_profile`\n```bash \n$ export SDKROOT=$(xcrun --sdk macosx --show-sdk-path)\n```\n\n\n#### 分析下变量的作用\n\n```bash\n$ xcrun --sdk macosx --show-sdk-path\n\n/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.3.sdk\n```\n关于 `xcrun` 的介绍： \n>  xcrun - Run or locate development tools and properties\n\n\n关于 `$SDKROOT` ChatGPT 的介绍： \n>   在 macOS 系统中，SDKROOT 是一个环境变量，用于指定当前正在使用的软件开发工具包（SDK）的根目录路径。\n> 通常，SDKROOT 的值是 macOS 系统上安装的 Xcode 工具包的路径。Xcode 是苹果提供的开发工具套件，包括编译器、调试器、接口构建工具等，用于开发 macOS 和 iOS 应用程序。      \n\n\n大致的原因是： `/usr/` 目录下没有 `include/` 文件。上次我有试过去将 `/usr/local/include` 链接到 `/usr/` 目录下，由于 macOS 对此目录为只读权限，所以无法链接。\n\n\n\n### 方法二：xcode 重新安装一遍命令行工具\n\n该方法对我来说并没有解决，不过可以试下：\n\n\n```bash\n# 删除之前的命令行工具\n$ sudo rm -rf /Library/Developer/CommandLineTools\n```\n\n\n```bash\n# 安装 \n$ xcode-select --install\n```\n\n\n## 学习参考\n- [Stackoverflow: Cannot find stdio.h](https://stackoverflow.com/questions/51761599/cannot-find-stdio-h)\n- [Github: runtime/cgo: fails to build after updating to Mojave](https://github.com/golang/go/issues/27921)\n- [Stackoverflow: SDKROOT path for latest SDK ](https://stackoverflow.com/questions/13964742/sdkroot-path-for-latest-sdk)\n\n","source":"_posts/mac-not-found-stdioh.md","raw":"---\ntitle: Mac 上用 clang 编译找不到标准库\ndate: 2024-01-16 20:46:40.719\nupdated: 2024-01-16 21:07:53.699\nurl: /archives/mac-clang-stdioh-error\ncategories: 技术笔记\ntags: 工具使用\n---\n\n# clang error: 'stdio.h' file not found \n\n前一段时间碰到这问题是在 GoLand 编译 Go 语言项目时报的找不到标准库。在终端用 clang 来编译也如此。\n\n\n> 我的系统版本\n```bash\n$ sw_vers\n\nProductName:\tmacOS\nProductVersion:\t12.7.2\n```\n\n> 编译 go 项目时 cgo 报的错误：\n```bash\n# runtime/cgo\n_cgo_export.c:3:10: fatal error: 'stdlib.h' file not found\n```\n\n> 在终端使用 clang 编译 c 文件：\n```c\n#include<stdio.h>\nint main() {\n    printf(\"Hello\\n\");\n    return 0;\n}\n// file: main.c \n```\n\n\n```shell\ncc main.c  -o main\nmain.c:1:9: fatal error: 'stdio.h' file not found\n#include<stdio.h>\n        ^~~~~~~~~\n1 error generated.\n```\n\n\n\n网上大部分的方法是去重新让 xcode 重装命令工具，对我来说没有解决此问题。\n\n最后找到解决方法是在添加一个 SDKROOT 环境变量：[帖子地址（Stackoverflow: Cannot find stdio.h）](https://stackoverflow.com/questions/51761599/cannot-find-stdio-h)\n\n\n### 方法一：添加环境变量\n先试下是否可行，能解决再添加到 `~/.bash_profile`\n```bash \n$ export SDKROOT=$(xcrun --sdk macosx --show-sdk-path)\n```\n\n\n#### 分析下变量的作用\n\n```bash\n$ xcrun --sdk macosx --show-sdk-path\n\n/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.3.sdk\n```\n关于 `xcrun` 的介绍： \n>  xcrun - Run or locate development tools and properties\n\n\n关于 `$SDKROOT` ChatGPT 的介绍： \n>   在 macOS 系统中，SDKROOT 是一个环境变量，用于指定当前正在使用的软件开发工具包（SDK）的根目录路径。\n> 通常，SDKROOT 的值是 macOS 系统上安装的 Xcode 工具包的路径。Xcode 是苹果提供的开发工具套件，包括编译器、调试器、接口构建工具等，用于开发 macOS 和 iOS 应用程序。      \n\n\n大致的原因是： `/usr/` 目录下没有 `include/` 文件。上次我有试过去将 `/usr/local/include` 链接到 `/usr/` 目录下，由于 macOS 对此目录为只读权限，所以无法链接。\n\n\n\n### 方法二：xcode 重新安装一遍命令行工具\n\n该方法对我来说并没有解决，不过可以试下：\n\n\n```bash\n# 删除之前的命令行工具\n$ sudo rm -rf /Library/Developer/CommandLineTools\n```\n\n\n```bash\n# 安装 \n$ xcode-select --install\n```\n\n\n## 学习参考\n- [Stackoverflow: Cannot find stdio.h](https://stackoverflow.com/questions/51761599/cannot-find-stdio-h)\n- [Github: runtime/cgo: fails to build after updating to Mojave](https://github.com/golang/go/issues/27921)\n- [Stackoverflow: SDKROOT path for latest SDK ](https://stackoverflow.com/questions/13964742/sdkroot-path-for-latest-sdk)\n\n","slug":"mac-not-found-stdioh","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clrnaka9q0005ny57hpdqhox6","content":"<h1 id=\"clang-error-‘stdio-h’-file-not-found\"><a href=\"#clang-error-‘stdio-h’-file-not-found\" class=\"headerlink\" title=\"clang error: ‘stdio.h’ file not found\"></a>clang error: ‘stdio.h’ file not found</h1><p>前一段时间碰到这问题是在 GoLand 编译 Go 语言项目时报的找不到标准库。在终端用 clang 来编译也如此。</p>\n<blockquote>\n<p>我的系统版本</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sw_vers</span><br><span class=\"line\"></span><br><span class=\"line\">ProductName:\tmacOS</span><br><span class=\"line\">ProductVersion:\t12.7.2</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>编译 go 项目时 cgo 报的错误：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># runtime/cgo</span></span><br><span class=\"line\">_cgo_export.c:3:10: fatal error: <span class=\"string\">&#x27;stdlib.h&#x27;</span> file not found</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在终端使用 clang 编译 c 文件：</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Hello\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// file: main.c </span></span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cc main.c  -o main</span><br><span class=\"line\">main.c:1:9: fatal error: &#x27;stdio.h&#x27; file not found</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">include&lt;stdio.h&gt;</span></span><br><span class=\"line\">        ^~~~~~~~~</span><br><span class=\"line\">1 error generated.</span><br></pre></td></tr></table></figure>\n\n\n\n<p>网上大部分的方法是去重新让 xcode 重装命令工具，对我来说没有解决此问题。</p>\n<p>最后找到解决方法是在添加一个 SDKROOT 环境变量：<a href=\"https://stackoverflow.com/questions/51761599/cannot-find-stdio-h\">帖子地址（Stackoverflow: Cannot find stdio.h）</a></p>\n<h3 id=\"方法一：添加环境变量\"><a href=\"#方法一：添加环境变量\" class=\"headerlink\" title=\"方法一：添加环境变量\"></a>方法一：添加环境变量</h3><p>先试下是否可行，能解决再添加到 <code>~/.bash_profile</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">export</span> SDKROOT=$(xcrun --sdk macosx --show-sdk-path)</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"分析下变量的作用\"><a href=\"#分析下变量的作用\" class=\"headerlink\" title=\"分析下变量的作用\"></a>分析下变量的作用</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ xcrun --sdk macosx --show-sdk-path</span><br><span class=\"line\"></span><br><span class=\"line\">/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.3.sdk</span><br></pre></td></tr></table></figure>\n<p>关于 <code>xcrun</code> 的介绍： </p>\n<blockquote>\n<p> xcrun - Run or locate development tools and properties</p>\n</blockquote>\n<p>关于 <code>$SDKROOT</code> ChatGPT 的介绍： </p>\n<blockquote>\n<p>  在 macOS 系统中，SDKROOT 是一个环境变量，用于指定当前正在使用的软件开发工具包（SDK）的根目录路径。<br>通常，SDKROOT 的值是 macOS 系统上安装的 Xcode 工具包的路径。Xcode 是苹果提供的开发工具套件，包括编译器、调试器、接口构建工具等，用于开发 macOS 和 iOS 应用程序。      </p>\n</blockquote>\n<p>大致的原因是： <code>/usr/</code> 目录下没有 <code>include/</code> 文件。上次我有试过去将 <code>/usr/local/include</code> 链接到 <code>/usr/</code> 目录下，由于 macOS 对此目录为只读权限，所以无法链接。</p>\n<h3 id=\"方法二：xcode-重新安装一遍命令行工具\"><a href=\"#方法二：xcode-重新安装一遍命令行工具\" class=\"headerlink\" title=\"方法二：xcode 重新安装一遍命令行工具\"></a>方法二：xcode 重新安装一遍命令行工具</h3><p>该方法对我来说并没有解决，不过可以试下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除之前的命令行工具</span></span><br><span class=\"line\">$ sudo <span class=\"built_in\">rm</span> -rf /Library/Developer/CommandLineTools</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 </span></span><br><span class=\"line\">$ xcode-select --install</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"学习参考\"><a href=\"#学习参考\" class=\"headerlink\" title=\"学习参考\"></a>学习参考</h2><ul>\n<li><a href=\"https://stackoverflow.com/questions/51761599/cannot-find-stdio-h\">Stackoverflow: Cannot find stdio.h</a></li>\n<li><a href=\"https://github.com/golang/go/issues/27921\">Github: runtime&#x2F;cgo: fails to build after updating to Mojave</a></li>\n<li><a href=\"https://stackoverflow.com/questions/13964742/sdkroot-path-for-latest-sdk\">Stackoverflow: SDKROOT path for latest SDK </a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"clang-error-‘stdio-h’-file-not-found\"><a href=\"#clang-error-‘stdio-h’-file-not-found\" class=\"headerlink\" title=\"clang error: ‘stdio.h’ file not found\"></a>clang error: ‘stdio.h’ file not found</h1><p>前一段时间碰到这问题是在 GoLand 编译 Go 语言项目时报的找不到标准库。在终端用 clang 来编译也如此。</p>\n<blockquote>\n<p>我的系统版本</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sw_vers</span><br><span class=\"line\"></span><br><span class=\"line\">ProductName:\tmacOS</span><br><span class=\"line\">ProductVersion:\t12.7.2</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>编译 go 项目时 cgo 报的错误：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># runtime/cgo</span></span><br><span class=\"line\">_cgo_export.c:3:10: fatal error: <span class=\"string\">&#x27;stdlib.h&#x27;</span> file not found</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在终端使用 clang 编译 c 文件：</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Hello\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// file: main.c </span></span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cc main.c  -o main</span><br><span class=\"line\">main.c:1:9: fatal error: &#x27;stdio.h&#x27; file not found</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">include&lt;stdio.h&gt;</span></span><br><span class=\"line\">        ^~~~~~~~~</span><br><span class=\"line\">1 error generated.</span><br></pre></td></tr></table></figure>\n\n\n\n<p>网上大部分的方法是去重新让 xcode 重装命令工具，对我来说没有解决此问题。</p>\n<p>最后找到解决方法是在添加一个 SDKROOT 环境变量：<a href=\"https://stackoverflow.com/questions/51761599/cannot-find-stdio-h\">帖子地址（Stackoverflow: Cannot find stdio.h）</a></p>\n<h3 id=\"方法一：添加环境变量\"><a href=\"#方法一：添加环境变量\" class=\"headerlink\" title=\"方法一：添加环境变量\"></a>方法一：添加环境变量</h3><p>先试下是否可行，能解决再添加到 <code>~/.bash_profile</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">export</span> SDKROOT=$(xcrun --sdk macosx --show-sdk-path)</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"分析下变量的作用\"><a href=\"#分析下变量的作用\" class=\"headerlink\" title=\"分析下变量的作用\"></a>分析下变量的作用</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ xcrun --sdk macosx --show-sdk-path</span><br><span class=\"line\"></span><br><span class=\"line\">/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.3.sdk</span><br></pre></td></tr></table></figure>\n<p>关于 <code>xcrun</code> 的介绍： </p>\n<blockquote>\n<p> xcrun - Run or locate development tools and properties</p>\n</blockquote>\n<p>关于 <code>$SDKROOT</code> ChatGPT 的介绍： </p>\n<blockquote>\n<p>  在 macOS 系统中，SDKROOT 是一个环境变量，用于指定当前正在使用的软件开发工具包（SDK）的根目录路径。<br>通常，SDKROOT 的值是 macOS 系统上安装的 Xcode 工具包的路径。Xcode 是苹果提供的开发工具套件，包括编译器、调试器、接口构建工具等，用于开发 macOS 和 iOS 应用程序。      </p>\n</blockquote>\n<p>大致的原因是： <code>/usr/</code> 目录下没有 <code>include/</code> 文件。上次我有试过去将 <code>/usr/local/include</code> 链接到 <code>/usr/</code> 目录下，由于 macOS 对此目录为只读权限，所以无法链接。</p>\n<h3 id=\"方法二：xcode-重新安装一遍命令行工具\"><a href=\"#方法二：xcode-重新安装一遍命令行工具\" class=\"headerlink\" title=\"方法二：xcode 重新安装一遍命令行工具\"></a>方法二：xcode 重新安装一遍命令行工具</h3><p>该方法对我来说并没有解决，不过可以试下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除之前的命令行工具</span></span><br><span class=\"line\">$ sudo <span class=\"built_in\">rm</span> -rf /Library/Developer/CommandLineTools</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 </span></span><br><span class=\"line\">$ xcode-select --install</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"学习参考\"><a href=\"#学习参考\" class=\"headerlink\" title=\"学习参考\"></a>学习参考</h2><ul>\n<li><a href=\"https://stackoverflow.com/questions/51761599/cannot-find-stdio-h\">Stackoverflow: Cannot find stdio.h</a></li>\n<li><a href=\"https://github.com/golang/go/issues/27921\">Github: runtime&#x2F;cgo: fails to build after updating to Mojave</a></li>\n<li><a href=\"https://stackoverflow.com/questions/13964742/sdkroot-path-for-latest-sdk\">Stackoverflow: SDKROOT path for latest SDK </a></li>\n</ul>\n"},{"title":"工具：ProxyChains 如何在终端中使用","date":"2023-09-12T09:00:21.864Z","updated":"2023-09-19T04:00:58.473Z","url":"/archives/usage-proxy-chains","_content":"\n\n最近在阿里云上的一个服务器（CentOS）需要走梯子，需要用到两个工具：\n- V2ray-Core： 这个不必多讲。和往常一样，走端口去访问外面，例如：socks5 1080\n- ProxyChains：一个开源的代理工具，[ProxyChains Github Repository ](https://github.com/haad/proxychains) \n> ProxyChains is a UNIX program, that hooks network-related libc functions in dynamically linked programs via a preloaded DLL and redirects the connections through SOCKS4a/5 or HTTP proxies.\n\n\n### 安装 ProxyChains\n```bash\n# Ubuntu\n$ apt-get install proxychains \n# CentOS \n$ yum install proxychains-ng\n# Mac \n$ brew install proxychains-ng\n```\n\n### 拉源码编译 ProxyChains (另一种安装方法)\n```bash\n$ git clone https://github.com/haad/proxychains.git\n$ cd proxychains\n$ ./configure\n$ make\n$ sudo make install\n```\n\n### 配置 Proxy 端口 \n\n配置文件，如果没有，就创建下：`/etc/proxychains.conf`\n也可以用： `proxychains -f xxx.conf 命令` 来指定。\n```shell\nstrict_chain\nproxy_dns\nremote_dns_subnet 224\ntcp_read_time_out 15000\ntcp_connect_time_out 8000\nquiet_mode\n[ProxyList]\n# 添加以下行，使用本地V2Ray代理，根据 v2ray 的 config \nsocks5  127.0.0.1 1080\n```\n\n### 如何使用\n```bash\n$ proxychains4 需要走代理的命名 \n# 例如： \n$ proxychains4 curl https://en.wikipedia.org/\n```\n\n### 验证下是否可以访问维基 \n```bash \n[root@AliyunServer proxychains]# proxychains4  curl https://en.wikipedia.org/\n[proxychains] config file found: /etc/proxychains.conf\n[proxychains] preloading /usr/local/lib/libproxychains4.so\n[proxychains] DLL init\n[proxychains] Dynamic chain  ...  127.0.0.1:1080  ...  en.wikipedia.org:443  ...  OK\n```\n\n### 设置别名\n每次都要输入 proxychains4 太麻烦，到 `~/.bash_profile` 给它声明个别名。\n\n\n```bash\n# proxychains4 的别名 pxy，终端输入 pxy 就是 proxychains4\n$ alias pxy='proxychains4'\n```\n\n声明完成后，记得让它生效。\n\n```bash \n$ source ~/.bash_profile\n\n# 验证别名是否 OK \n$ pxy --help \n```\n\n\n## Mac 上如何使用 \n由于 MacOS 有 SIP（简单来说就是系统保护）,需要先关闭，否则无法正常使用。\n\n> System Integrity Protection (SIP) in macOS protects the entire system by preventing the execution of unauthorized code. \n\n1. 在终端中查看 SIP 状态\n```bash  \n$ csrutil status \n```\n\n2. 重启 Mac 进入 Recovery mode \n```bash \n$ sudo reboot\n# 开机时按住： command + r ，进入 Recovery mode \n# 进入之后，上面的顶部菜单栏找到终端，输入命令即可\n# csrutil --help \n\n# 关闭 sip \n$ csrutil disable\n# 开启 sip \n# csrutil enable \n# 然后在重启 Mac 就回到正常模式了\n$ reboot \n```\n\n3. 关闭 SIP 后，就可以正常使用了\n\n```bash \n# 查看 SIP 是否关闭  \n$ csrutil status\n# System Integrity Protection status: disabled.\n```\n\n```bash \n# 查看当前的 IP 归属地 \n$ proxychains4 curl cip.cc \n[proxychains] config file found: /usr/local/etc/proxychains.conf\n[proxychains] preloading /usr/local/Cellar/proxychains-ng/4.16/lib/libproxychains4.dylib\nIP\t: ***.***.***,**\n地址\t: 美国  加利福尼亚州  洛杉矶\n运营商\t: *******\n\n数据二\t: 美国 | 加利福尼亚州洛杉矶CNServers数据中心\n\n数据三\t: 美国加利福尼亚 | 层峰网络\n\nURL\t: http://www.cip.cc/***.***.***,**\n```\n\n\n## 学习参考 \n- [Github: ProxyChains ](https://github.com/haad/proxychains)\n- [About System Integrity Protection on your Mac](https://support.apple.com/en-us/102149)\n- [Disabling and Enabling System Integrity Protection](https://developer.apple.com/documentation/security/disabling_and_enabling_system_integrity_protection)\n\n","source":"_posts/tools-proxychains.md","raw":"---\ntitle: 工具：ProxyChains 如何在终端中使用\ndate: 2023-09-12 17:00:21.864\nupdated: 2023-09-19 12:00:58.473\nurl: /archives/usage-proxy-chains\ncategories: 技术笔记\ntags: 工具使用\n---\n\n\n最近在阿里云上的一个服务器（CentOS）需要走梯子，需要用到两个工具：\n- V2ray-Core： 这个不必多讲。和往常一样，走端口去访问外面，例如：socks5 1080\n- ProxyChains：一个开源的代理工具，[ProxyChains Github Repository ](https://github.com/haad/proxychains) \n> ProxyChains is a UNIX program, that hooks network-related libc functions in dynamically linked programs via a preloaded DLL and redirects the connections through SOCKS4a/5 or HTTP proxies.\n\n\n### 安装 ProxyChains\n```bash\n# Ubuntu\n$ apt-get install proxychains \n# CentOS \n$ yum install proxychains-ng\n# Mac \n$ brew install proxychains-ng\n```\n\n### 拉源码编译 ProxyChains (另一种安装方法)\n```bash\n$ git clone https://github.com/haad/proxychains.git\n$ cd proxychains\n$ ./configure\n$ make\n$ sudo make install\n```\n\n### 配置 Proxy 端口 \n\n配置文件，如果没有，就创建下：`/etc/proxychains.conf`\n也可以用： `proxychains -f xxx.conf 命令` 来指定。\n```shell\nstrict_chain\nproxy_dns\nremote_dns_subnet 224\ntcp_read_time_out 15000\ntcp_connect_time_out 8000\nquiet_mode\n[ProxyList]\n# 添加以下行，使用本地V2Ray代理，根据 v2ray 的 config \nsocks5  127.0.0.1 1080\n```\n\n### 如何使用\n```bash\n$ proxychains4 需要走代理的命名 \n# 例如： \n$ proxychains4 curl https://en.wikipedia.org/\n```\n\n### 验证下是否可以访问维基 \n```bash \n[root@AliyunServer proxychains]# proxychains4  curl https://en.wikipedia.org/\n[proxychains] config file found: /etc/proxychains.conf\n[proxychains] preloading /usr/local/lib/libproxychains4.so\n[proxychains] DLL init\n[proxychains] Dynamic chain  ...  127.0.0.1:1080  ...  en.wikipedia.org:443  ...  OK\n```\n\n### 设置别名\n每次都要输入 proxychains4 太麻烦，到 `~/.bash_profile` 给它声明个别名。\n\n\n```bash\n# proxychains4 的别名 pxy，终端输入 pxy 就是 proxychains4\n$ alias pxy='proxychains4'\n```\n\n声明完成后，记得让它生效。\n\n```bash \n$ source ~/.bash_profile\n\n# 验证别名是否 OK \n$ pxy --help \n```\n\n\n## Mac 上如何使用 \n由于 MacOS 有 SIP（简单来说就是系统保护）,需要先关闭，否则无法正常使用。\n\n> System Integrity Protection (SIP) in macOS protects the entire system by preventing the execution of unauthorized code. \n\n1. 在终端中查看 SIP 状态\n```bash  \n$ csrutil status \n```\n\n2. 重启 Mac 进入 Recovery mode \n```bash \n$ sudo reboot\n# 开机时按住： command + r ，进入 Recovery mode \n# 进入之后，上面的顶部菜单栏找到终端，输入命令即可\n# csrutil --help \n\n# 关闭 sip \n$ csrutil disable\n# 开启 sip \n# csrutil enable \n# 然后在重启 Mac 就回到正常模式了\n$ reboot \n```\n\n3. 关闭 SIP 后，就可以正常使用了\n\n```bash \n# 查看 SIP 是否关闭  \n$ csrutil status\n# System Integrity Protection status: disabled.\n```\n\n```bash \n# 查看当前的 IP 归属地 \n$ proxychains4 curl cip.cc \n[proxychains] config file found: /usr/local/etc/proxychains.conf\n[proxychains] preloading /usr/local/Cellar/proxychains-ng/4.16/lib/libproxychains4.dylib\nIP\t: ***.***.***,**\n地址\t: 美国  加利福尼亚州  洛杉矶\n运营商\t: *******\n\n数据二\t: 美国 | 加利福尼亚州洛杉矶CNServers数据中心\n\n数据三\t: 美国加利福尼亚 | 层峰网络\n\nURL\t: http://www.cip.cc/***.***.***,**\n```\n\n\n## 学习参考 \n- [Github: ProxyChains ](https://github.com/haad/proxychains)\n- [About System Integrity Protection on your Mac](https://support.apple.com/en-us/102149)\n- [Disabling and Enabling System Integrity Protection](https://developer.apple.com/documentation/security/disabling_and_enabling_system_integrity_protection)\n\n","slug":"tools-proxychains","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clrnaka9v000gny57cegb55uh","content":"<p>最近在阿里云上的一个服务器（CentOS）需要走梯子，需要用到两个工具：</p>\n<ul>\n<li>V2ray-Core： 这个不必多讲。和往常一样，走端口去访问外面，例如：socks5 1080</li>\n<li>ProxyChains：一个开源的代理工具，<a href=\"https://github.com/haad/proxychains\">ProxyChains Github Repository </a> <blockquote>\n<p>ProxyChains is a UNIX program, that hooks network-related libc functions in dynamically linked programs via a preloaded DLL and redirects the connections through SOCKS4a&#x2F;5 or HTTP proxies.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"安装-ProxyChains\"><a href=\"#安装-ProxyChains\" class=\"headerlink\" title=\"安装 ProxyChains\"></a>安装 ProxyChains</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Ubuntu</span></span><br><span class=\"line\">$ apt-get install proxychains </span><br><span class=\"line\"><span class=\"comment\"># CentOS </span></span><br><span class=\"line\">$ yum install proxychains-ng</span><br><span class=\"line\"><span class=\"comment\"># Mac </span></span><br><span class=\"line\">$ brew install proxychains-ng</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"拉源码编译-ProxyChains-另一种安装方法\"><a href=\"#拉源码编译-ProxyChains-另一种安装方法\" class=\"headerlink\" title=\"拉源码编译 ProxyChains (另一种安装方法)\"></a>拉源码编译 ProxyChains (另一种安装方法)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/haad/proxychains.git</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> proxychains</span><br><span class=\"line\">$ ./configure</span><br><span class=\"line\">$ make</span><br><span class=\"line\">$ sudo make install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置-Proxy-端口\"><a href=\"#配置-Proxy-端口\" class=\"headerlink\" title=\"配置 Proxy 端口\"></a>配置 Proxy 端口</h3><p>配置文件，如果没有，就创建下：<code>/etc/proxychains.conf</code><br>也可以用： <code>proxychains -f xxx.conf 命令</code> 来指定。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strict_chain</span><br><span class=\"line\">proxy_dns</span><br><span class=\"line\">remote_dns_subnet 224</span><br><span class=\"line\">tcp_read_time_out 15000</span><br><span class=\"line\">tcp_connect_time_out 8000</span><br><span class=\"line\">quiet_mode</span><br><span class=\"line\">[ProxyList]</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加以下行，使用本地V2Ray代理，根据 v2ray 的 config</span> </span><br><span class=\"line\">socks5  127.0.0.1 1080</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ proxychains4 需要走代理的命名 </span><br><span class=\"line\"><span class=\"comment\"># 例如： </span></span><br><span class=\"line\">$ proxychains4 curl https://en.wikipedia.org/</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"验证下是否可以访问维基\"><a href=\"#验证下是否可以访问维基\" class=\"headerlink\" title=\"验证下是否可以访问维基\"></a>验证下是否可以访问维基</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@AliyunServer proxychains]<span class=\"comment\"># proxychains4  curl https://en.wikipedia.org/</span></span><br><span class=\"line\">[proxychains] config file found: /etc/proxychains.conf</span><br><span class=\"line\">[proxychains] preloading /usr/local/lib/libproxychains4.so</span><br><span class=\"line\">[proxychains] DLL init</span><br><span class=\"line\">[proxychains] Dynamic chain  ...  127.0.0.1:1080  ...  en.wikipedia.org:443  ...  OK</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"设置别名\"><a href=\"#设置别名\" class=\"headerlink\" title=\"设置别名\"></a>设置别名</h3><p>每次都要输入 proxychains4 太麻烦，到 <code>~/.bash_profile</code> 给它声明个别名。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># proxychains4 的别名 pxy，终端输入 pxy 就是 proxychains4</span></span><br><span class=\"line\">$ <span class=\"built_in\">alias</span> pxy=<span class=\"string\">&#x27;proxychains4&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>声明完成后，记得让它生效。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">source</span> ~/.bash_profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证别名是否 OK </span></span><br><span class=\"line\">$ pxy --<span class=\"built_in\">help</span> </span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Mac-上如何使用\"><a href=\"#Mac-上如何使用\" class=\"headerlink\" title=\"Mac 上如何使用\"></a>Mac 上如何使用</h2><p>由于 MacOS 有 SIP（简单来说就是系统保护）,需要先关闭，否则无法正常使用。</p>\n<blockquote>\n<p>System Integrity Protection (SIP) in macOS protects the entire system by preventing the execution of unauthorized code. </p>\n</blockquote>\n<ol>\n<li><p>在终端中查看 SIP 状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ csrutil status </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启 Mac 进入 Recovery mode </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo reboot</span><br><span class=\"line\"><span class=\"comment\"># 开机时按住： command + r ，进入 Recovery mode </span></span><br><span class=\"line\"><span class=\"comment\"># 进入之后，上面的顶部菜单栏找到终端，输入命令即可</span></span><br><span class=\"line\"><span class=\"comment\"># csrutil --help </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭 sip </span></span><br><span class=\"line\">$ csrutil <span class=\"built_in\">disable</span></span><br><span class=\"line\"><span class=\"comment\"># 开启 sip </span></span><br><span class=\"line\"><span class=\"comment\"># csrutil enable </span></span><br><span class=\"line\"><span class=\"comment\"># 然后在重启 Mac 就回到正常模式了</span></span><br><span class=\"line\">$ reboot </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>关闭 SIP 后，就可以正常使用了</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看 SIP 是否关闭  </span></span><br><span class=\"line\">$ csrutil status</span><br><span class=\"line\"><span class=\"comment\"># System Integrity Protection status: disabled.</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看当前的 IP 归属地 </span></span><br><span class=\"line\">$ proxychains4 curl cip.cc </span><br><span class=\"line\">[proxychains] config file found: /usr/local/etc/proxychains.conf</span><br><span class=\"line\">[proxychains] preloading /usr/local/Cellar/proxychains-ng/4.16/lib/libproxychains4.dylib</span><br><span class=\"line\">IP\t: ***.***.***,**</span><br><span class=\"line\">地址\t: 美国  加利福尼亚州  洛杉矶</span><br><span class=\"line\">运营商\t: *******</span><br><span class=\"line\"></span><br><span class=\"line\">数据二\t: 美国 | 加利福尼亚州洛杉矶CNServers数据中心</span><br><span class=\"line\"></span><br><span class=\"line\">数据三\t: 美国加利福尼亚 | 层峰网络</span><br><span class=\"line\"></span><br><span class=\"line\">URL\t: http://www.cip.cc/***.***.***,**</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"学习参考\"><a href=\"#学习参考\" class=\"headerlink\" title=\"学习参考\"></a>学习参考</h2><ul>\n<li><a href=\"https://github.com/haad/proxychains\">Github: ProxyChains </a></li>\n<li><a href=\"https://support.apple.com/en-us/102149\">About System Integrity Protection on your Mac</a></li>\n<li><a href=\"https://developer.apple.com/documentation/security/disabling_and_enabling_system_integrity_protection\">Disabling and Enabling System Integrity Protection</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在阿里云上的一个服务器（CentOS）需要走梯子，需要用到两个工具：</p>\n<ul>\n<li>V2ray-Core： 这个不必多讲。和往常一样，走端口去访问外面，例如：socks5 1080</li>\n<li>ProxyChains：一个开源的代理工具，<a href=\"https://github.com/haad/proxychains\">ProxyChains Github Repository </a> <blockquote>\n<p>ProxyChains is a UNIX program, that hooks network-related libc functions in dynamically linked programs via a preloaded DLL and redirects the connections through SOCKS4a&#x2F;5 or HTTP proxies.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"安装-ProxyChains\"><a href=\"#安装-ProxyChains\" class=\"headerlink\" title=\"安装 ProxyChains\"></a>安装 ProxyChains</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Ubuntu</span></span><br><span class=\"line\">$ apt-get install proxychains </span><br><span class=\"line\"><span class=\"comment\"># CentOS </span></span><br><span class=\"line\">$ yum install proxychains-ng</span><br><span class=\"line\"><span class=\"comment\"># Mac </span></span><br><span class=\"line\">$ brew install proxychains-ng</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"拉源码编译-ProxyChains-另一种安装方法\"><a href=\"#拉源码编译-ProxyChains-另一种安装方法\" class=\"headerlink\" title=\"拉源码编译 ProxyChains (另一种安装方法)\"></a>拉源码编译 ProxyChains (另一种安装方法)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/haad/proxychains.git</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> proxychains</span><br><span class=\"line\">$ ./configure</span><br><span class=\"line\">$ make</span><br><span class=\"line\">$ sudo make install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置-Proxy-端口\"><a href=\"#配置-Proxy-端口\" class=\"headerlink\" title=\"配置 Proxy 端口\"></a>配置 Proxy 端口</h3><p>配置文件，如果没有，就创建下：<code>/etc/proxychains.conf</code><br>也可以用： <code>proxychains -f xxx.conf 命令</code> 来指定。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strict_chain</span><br><span class=\"line\">proxy_dns</span><br><span class=\"line\">remote_dns_subnet 224</span><br><span class=\"line\">tcp_read_time_out 15000</span><br><span class=\"line\">tcp_connect_time_out 8000</span><br><span class=\"line\">quiet_mode</span><br><span class=\"line\">[ProxyList]</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加以下行，使用本地V2Ray代理，根据 v2ray 的 config</span> </span><br><span class=\"line\">socks5  127.0.0.1 1080</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ proxychains4 需要走代理的命名 </span><br><span class=\"line\"><span class=\"comment\"># 例如： </span></span><br><span class=\"line\">$ proxychains4 curl https://en.wikipedia.org/</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"验证下是否可以访问维基\"><a href=\"#验证下是否可以访问维基\" class=\"headerlink\" title=\"验证下是否可以访问维基\"></a>验证下是否可以访问维基</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@AliyunServer proxychains]<span class=\"comment\"># proxychains4  curl https://en.wikipedia.org/</span></span><br><span class=\"line\">[proxychains] config file found: /etc/proxychains.conf</span><br><span class=\"line\">[proxychains] preloading /usr/local/lib/libproxychains4.so</span><br><span class=\"line\">[proxychains] DLL init</span><br><span class=\"line\">[proxychains] Dynamic chain  ...  127.0.0.1:1080  ...  en.wikipedia.org:443  ...  OK</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"设置别名\"><a href=\"#设置别名\" class=\"headerlink\" title=\"设置别名\"></a>设置别名</h3><p>每次都要输入 proxychains4 太麻烦，到 <code>~/.bash_profile</code> 给它声明个别名。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># proxychains4 的别名 pxy，终端输入 pxy 就是 proxychains4</span></span><br><span class=\"line\">$ <span class=\"built_in\">alias</span> pxy=<span class=\"string\">&#x27;proxychains4&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>声明完成后，记得让它生效。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">source</span> ~/.bash_profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证别名是否 OK </span></span><br><span class=\"line\">$ pxy --<span class=\"built_in\">help</span> </span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Mac-上如何使用\"><a href=\"#Mac-上如何使用\" class=\"headerlink\" title=\"Mac 上如何使用\"></a>Mac 上如何使用</h2><p>由于 MacOS 有 SIP（简单来说就是系统保护）,需要先关闭，否则无法正常使用。</p>\n<blockquote>\n<p>System Integrity Protection (SIP) in macOS protects the entire system by preventing the execution of unauthorized code. </p>\n</blockquote>\n<ol>\n<li><p>在终端中查看 SIP 状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ csrutil status </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启 Mac 进入 Recovery mode </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo reboot</span><br><span class=\"line\"><span class=\"comment\"># 开机时按住： command + r ，进入 Recovery mode </span></span><br><span class=\"line\"><span class=\"comment\"># 进入之后，上面的顶部菜单栏找到终端，输入命令即可</span></span><br><span class=\"line\"><span class=\"comment\"># csrutil --help </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭 sip </span></span><br><span class=\"line\">$ csrutil <span class=\"built_in\">disable</span></span><br><span class=\"line\"><span class=\"comment\"># 开启 sip </span></span><br><span class=\"line\"><span class=\"comment\"># csrutil enable </span></span><br><span class=\"line\"><span class=\"comment\"># 然后在重启 Mac 就回到正常模式了</span></span><br><span class=\"line\">$ reboot </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>关闭 SIP 后，就可以正常使用了</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看 SIP 是否关闭  </span></span><br><span class=\"line\">$ csrutil status</span><br><span class=\"line\"><span class=\"comment\"># System Integrity Protection status: disabled.</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看当前的 IP 归属地 </span></span><br><span class=\"line\">$ proxychains4 curl cip.cc </span><br><span class=\"line\">[proxychains] config file found: /usr/local/etc/proxychains.conf</span><br><span class=\"line\">[proxychains] preloading /usr/local/Cellar/proxychains-ng/4.16/lib/libproxychains4.dylib</span><br><span class=\"line\">IP\t: ***.***.***,**</span><br><span class=\"line\">地址\t: 美国  加利福尼亚州  洛杉矶</span><br><span class=\"line\">运营商\t: *******</span><br><span class=\"line\"></span><br><span class=\"line\">数据二\t: 美国 | 加利福尼亚州洛杉矶CNServers数据中心</span><br><span class=\"line\"></span><br><span class=\"line\">数据三\t: 美国加利福尼亚 | 层峰网络</span><br><span class=\"line\"></span><br><span class=\"line\">URL\t: http://www.cip.cc/***.***.***,**</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"学习参考\"><a href=\"#学习参考\" class=\"headerlink\" title=\"学习参考\"></a>学习参考</h2><ul>\n<li><a href=\"https://github.com/haad/proxychains\">Github: ProxyChains </a></li>\n<li><a href=\"https://support.apple.com/en-us/102149\">About System Integrity Protection on your Mac</a></li>\n<li><a href=\"https://developer.apple.com/documentation/security/disabling_and_enabling_system_integrity_protection\">Disabling and Enabling System Integrity Protection</a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clrnaka9i0001ny578vy94m78","category_id":"clrnaka9o0003ny57ayz65tox","_id":"clrnaka9t000any572sgldvy2"},{"post_id":"clrnaka9m0002ny57f6tr8vpk","category_id":"clrnaka9o0003ny57ayz65tox","_id":"clrnaka9u000dny57f1eg8dqw"},{"post_id":"clrnaka9q0005ny57hpdqhox6","category_id":"clrnaka9o0003ny57ayz65tox","_id":"clrnaka9v000fny57e0h8drc8"},{"post_id":"clrnaka9v000gny57cegb55uh","category_id":"clrnaka9o0003ny57ayz65tox","_id":"clrnaka9w000iny57fjc29y7r"}],"PostTag":[{"post_id":"clrnaka9i0001ny578vy94m78","tag_id":"clrnaka9p0004ny576aj2gssl","_id":"clrnaka9t0008ny57aoql8tol"},{"post_id":"clrnaka9m0002ny57f6tr8vpk","tag_id":"clrnaka9p0004ny576aj2gssl","_id":"clrnaka9u000cny57gizx99mg"},{"post_id":"clrnaka9q0005ny57hpdqhox6","tag_id":"clrnaka9t000bny576fzd9nu8","_id":"clrnaka9u000eny57atpl3cb7"},{"post_id":"clrnaka9v000gny57cegb55uh","tag_id":"clrnaka9t000bny576fzd9nu8","_id":"clrnaka9w000hny57el371zvz"}],"Tag":[{"name":"编程语言","_id":"clrnaka9p0004ny576aj2gssl"},{"name":"工具使用","_id":"clrnaka9t000bny576fzd9nu8"}]}}